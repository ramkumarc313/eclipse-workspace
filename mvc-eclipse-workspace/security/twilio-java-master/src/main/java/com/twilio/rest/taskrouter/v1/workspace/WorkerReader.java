/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.taskrouter.v1.workspace;

import com.twilio.base.Page;
import com.twilio.base.Reader;
import com.twilio.base.ResourceSet;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

public class WorkerReader extends Reader<Worker> {
    private final String pathWorkspaceSid;
    private String activityName;
    private String activitySid;
    private String available;
    private String friendlyName;
    private String targetWorkersExpression;
    private String taskQueueName;
    private String taskQueueSid;

    /**
     * Construct a new WorkerReader.
     *
     * @param pathWorkspaceSid The workspace_sid
     */
    public WorkerReader(final String pathWorkspaceSid) {
        this.pathWorkspaceSid = pathWorkspaceSid;
    }

    /**
     * Filter by workers that are in a particular Activity by Friendly Name.
     *
     * @param activityName Filter by workers that are in a particular Activity by
     *                     Friendly Name
     * @return this
     */
    public WorkerReader setActivityName(final String activityName) {
        this.activityName = activityName;
        return this;
    }

    /**
     * Filter by workers that are in a particular Activity by SID.
     *
     * @param activitySid Filter by workers that are in a particular Activity by SID
     * @return this
     */
    public WorkerReader setActivitySid(final String activitySid) {
        this.activitySid = activitySid;
        return this;
    }

    /**
     * Filter by workers that are available or unavailable. (Note: This can be
     * 'true', '1' or 'yes' to indicate a true value. All other values will
     * represent false).
     *
     * @param available Filter by workers that are available or unavailable.
     * @return this
     */
    public WorkerReader setAvailable(final String available) {
        this.available = available;
        return this;
    }

    /**
     * Filter by a worker's friendly name.
     *
     * @param friendlyName Filter by a worker's friendly name
     * @return this
     */
    public WorkerReader setFriendlyName(final String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Filter by workers that would match an expression on a TaskQueue. This is
     * helpful for debugging which workers would match a potential queue..
     *
     * @param targetWorkersExpression Filter by workers that would match an
     *                                expression on a TaskQueue.
     * @return this
     */
    public WorkerReader setTargetWorkersExpression(final String targetWorkersExpression) {
        this.targetWorkersExpression = targetWorkersExpression;
        return this;
    }

    /**
     * Filter by workers that are eligible for a TaskQueue by Friendly Name.
     *
     * @param taskQueueName Filter by workers that are eligible for a TaskQueue by
     *                      Friendly Name
     * @return this
     */
    public WorkerReader setTaskQueueName(final String taskQueueName) {
        this.taskQueueName = taskQueueName;
        return this;
    }

    /**
     * Filter by workers that are eligible for a TaskQueue by SID.
     *
     * @param taskQueueSid Filter by workers that are eligible for a TaskQueue by
     *                     SID
     * @return this
     */
    public WorkerReader setTaskQueueSid(final String taskQueueSid) {
        this.taskQueueSid = taskQueueSid;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the read.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Worker ResourceSet
     */
    @Override
    public ResourceSet<Worker> read(final TwilioRestClient client) {
        return new ResourceSet<>(this, client, firstPage(client));
    }

    /**
     * Make the request to the Twilio API to perform the read.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Worker ResourceSet
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Page<Worker> firstPage(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            Domains.TASKROUTER.toString(),
            "/v1/Workspaces/" + this.pathWorkspaceSid + "/Workers",
            client.getRegion()
        );

        addQueryParams(request);
        return pageForRequest(client, request);
    }

    /**
     * Retrieve the target page from the Twilio API.
     *
     * @param targetUrl API-generated URL for the requested results page
     * @param client TwilioRestClient with which to make the request
     * @return Worker ResourceSet
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Page<Worker> getPage(final String targetUrl, final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            targetUrl
        );

        return pageForRequest(client, request);
    }

    /**
     * Retrieve the next page from the Twilio API.
     *
     * @param page current page
     * @param client TwilioRestClient with which to make the request
     * @return Next Page
     */
    @Override
    public Page<Worker> nextPage(final Page<Worker> page,
                                 final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getNextPageUrl(
                Domains.TASKROUTER.toString(),
                client.getRegion()
            )
        );
        return pageForRequest(client, request);
    }

    /**
     * Retrieve the previous page from the Twilio API.
     *
     * @param page current page
     * @param client TwilioRestClient with which to make the request
     * @return Previous Page
     */
    @Override
    public Page<Worker> previousPage(final Page<Worker> page,
                                     final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getPreviousPageUrl(
                Domains.TASKROUTER.toString(),
                client.getRegion()
            )
        );
        return pageForRequest(client, request);
    }

    /**
     * Generate a Page of Worker Resources for a given request.
     *
     * @param client TwilioRestClient with which to make the request
     * @param request Request to generate a page for
     * @return Page for the Request
     */
    private Page<Worker> pageForRequest(final TwilioRestClient client, final Request request) {
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Worker read failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return Page.fromJson(
            "workers",
            response.getContent(),
            Worker.class,
            client.getObjectMapper()
        );
    }

    /**
     * Add the requested query string arguments to the Request.
     *
     * @param request Request to add query string arguments to
     */
    private void addQueryParams(final Request request) {
        if (activityName != null) {
            request.addQueryParam("ActivityName", activityName);
        }

        if (activitySid != null) {
            request.addQueryParam("ActivitySid", activitySid);
        }

        if (available != null) {
            request.addQueryParam("Available", available);
        }

        if (friendlyName != null) {
            request.addQueryParam("FriendlyName", friendlyName);
        }

        if (targetWorkersExpression != null) {
            request.addQueryParam("TargetWorkersExpression", targetWorkersExpression);
        }

        if (taskQueueName != null) {
            request.addQueryParam("TaskQueueName", taskQueueName);
        }

        if (taskQueueSid != null) {
            request.addQueryParam("TaskQueueSid", taskQueueSid);
        }

        if (getPageSize() != null) {
            request.addQueryParam("PageSize", Integer.toString(getPageSize()));
        }
    }
}