/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.authy.v1.service.entity.factor;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.MoreObjects;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import org.joda.time.DateTime;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Map;
import java.util.Objects;

/**
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Challenge extends Resource {
    private static final long serialVersionUID = 149233025221094L;

    public enum ChallengeStatuses {
        PENDING("pending"),
        EXPIRED("expired"),
        APPROVED("approved"),
        DENIED("denied");

        private final String value;

        private ChallengeStatuses(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a ChallengeStatuses from a string.
         * @param value string value
         * @return generated ChallengeStatuses
         */
        @JsonCreator
        public static ChallengeStatuses forValue(final String value) {
            return Promoter.enumFromString(value, ChallengeStatuses.values());
        }
    }

    public enum ChallengeReasons {
        NONE("none"),
        NOT_NEEDED("not_needed"),
        NOT_REQUESTED("not_requested");

        private final String value;

        private ChallengeReasons(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a ChallengeReasons from a string.
         * @param value string value
         * @return generated ChallengeReasons
         */
        @JsonCreator
        public static ChallengeReasons forValue(final String value) {
            return Promoter.enumFromString(value, ChallengeReasons.values());
        }
    }

    public enum FactorTypes {
        APP_PUSH("app-push"),
        SMS("sms"),
        TOTP("totp");

        private final String value;

        private FactorTypes(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a FactorTypes from a string.
         * @param value string value
         * @return generated FactorTypes
         */
        @JsonCreator
        public static FactorTypes forValue(final String value) {
            return Promoter.enumFromString(value, FactorTypes.values());
        }
    }

    public enum FactorStrengths {
        UNKNOWN("unknown"),
        VERY_LOW("very_low"),
        LOW("low"),
        MEDIUM("medium"),
        HIGH("high"),
        VERY_HIGH("very_high");

        private final String value;

        private FactorStrengths(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a FactorStrengths from a string.
         * @param value string value
         * @return generated FactorStrengths
         */
        @JsonCreator
        public static FactorStrengths forValue(final String value) {
            return Promoter.enumFromString(value, FactorStrengths.values());
        }
    }

    /**
     * Create a ChallengeCreator to execute create.
     *
     * @param pathServiceSid Service Sid.
     * @param pathIdentity Unique identity of the Entity
     * @param pathFactorSid Factor Sid.
     * @return ChallengeCreator capable of executing the create
     */
    public static ChallengeCreator creator(final String pathServiceSid,
                                           final String pathIdentity,
                                           final String pathFactorSid) {
        return new ChallengeCreator(pathServiceSid, pathIdentity, pathFactorSid);
    }

    /**
     * Create a ChallengeDeleter to execute delete.
     *
     * @param pathServiceSid Service Sid.
     * @param pathIdentity Unique identity of the Entity
     * @param pathFactorSid Factor Sid.
     * @param pathSid A string that uniquely identifies this Challenge.
     * @return ChallengeDeleter capable of executing the delete
     */
    public static ChallengeDeleter deleter(final String pathServiceSid,
                                           final String pathIdentity,
                                           final String pathFactorSid,
                                           final String pathSid) {
        return new ChallengeDeleter(pathServiceSid, pathIdentity, pathFactorSid, pathSid);
    }

    /**
     * Create a ChallengeFetcher to execute fetch.
     *
     * @param pathServiceSid Service Sid.
     * @param pathIdentity Unique identity of the Entity
     * @param pathFactorSid Factor Sid.
     * @param pathSid A string that uniquely identifies this Challenge, or `latest`.
     * @return ChallengeFetcher capable of executing the fetch
     */
    public static ChallengeFetcher fetcher(final String pathServiceSid,
                                           final String pathIdentity,
                                           final String pathFactorSid,
                                           final String pathSid) {
        return new ChallengeFetcher(pathServiceSid, pathIdentity, pathFactorSid, pathSid);
    }

    /**
     * Create a ChallengeUpdater to execute update.
     *
     * @param pathServiceSid Service Sid.
     * @param pathIdentity Unique identity of the Entity
     * @param pathFactorSid Factor Sid.
     * @param pathSid A string that uniquely identifies this Challenge, or `latest`.
     * @return ChallengeUpdater capable of executing the update
     */
    public static ChallengeUpdater updater(final String pathServiceSid,
                                           final String pathIdentity,
                                           final String pathFactorSid,
                                           final String pathSid) {
        return new ChallengeUpdater(pathServiceSid, pathIdentity, pathFactorSid, pathSid);
    }

    /**
     * Converts a JSON String into a Challenge object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Challenge object represented by the provided JSON
     */
    public static Challenge fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Challenge.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Challenge object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Challenge object represented by the provided JSON
     */
    public static Challenge fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Challenge.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String sid;
    private final String accountSid;
    private final String serviceSid;
    private final String entitySid;
    private final String identity;
    private final String factorSid;
    private final DateTime dateCreated;
    private final DateTime dateUpdated;
    private final DateTime dateResponded;
    private final DateTime expirationDate;
    private final Challenge.ChallengeStatuses status;
    private final Challenge.ChallengeReasons respondedReason;
    private final String details;
    private final String hiddenDetails;
    private final Challenge.FactorTypes factorType;
    private final Challenge.FactorStrengths factorStrength;
    private final URI url;

    @JsonCreator
    private Challenge(@JsonProperty("sid")
                      final String sid,
                      @JsonProperty("account_sid")
                      final String accountSid,
                      @JsonProperty("service_sid")
                      final String serviceSid,
                      @JsonProperty("entity_sid")
                      final String entitySid,
                      @JsonProperty("identity")
                      final String identity,
                      @JsonProperty("factor_sid")
                      final String factorSid,
                      @JsonProperty("date_created")
                      final String dateCreated,
                      @JsonProperty("date_updated")
                      final String dateUpdated,
                      @JsonProperty("date_responded")
                      final String dateResponded,
                      @JsonProperty("expiration_date")
                      final String expirationDate,
                      @JsonProperty("status")
                      final Challenge.ChallengeStatuses status,
                      @JsonProperty("responded_reason")
                      final Challenge.ChallengeReasons respondedReason,
                      @JsonProperty("details")
                      final String details,
                      @JsonProperty("hidden_details")
                      final String hiddenDetails,
                      @JsonProperty("factor_type")
                      final Challenge.FactorTypes factorType,
                      @JsonProperty("factor_strength")
                      final Challenge.FactorStrengths factorStrength,
                      @JsonProperty("url")
                      final URI url) {
        this.sid = sid;
        this.accountSid = accountSid;
        this.serviceSid = serviceSid;
        this.entitySid = entitySid;
        this.identity = identity;
        this.factorSid = factorSid;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.iso8601DateTimeFromString(dateUpdated);
        this.dateResponded = DateConverter.iso8601DateTimeFromString(dateResponded);
        this.expirationDate = DateConverter.iso8601DateTimeFromString(expirationDate);
        this.status = status;
        this.respondedReason = respondedReason;
        this.details = details;
        this.hiddenDetails = hiddenDetails;
        this.factorType = factorType;
        this.factorStrength = factorStrength;
        this.url = url;
    }

    /**
     * Returns The A string that uniquely identifies this Challenge..
     *
     * @return A string that uniquely identifies this Challenge.
     */
    public final String getSid() {
        return this.sid;
    }

    /**
     * Returns The Account Sid..
     *
     * @return Account Sid.
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns The Service Sid..
     *
     * @return Service Sid.
     */
    public final String getServiceSid() {
        return this.serviceSid;
    }

    /**
     * Returns The Entity Sid..
     *
     * @return Entity Sid.
     */
    public final String getEntitySid() {
        return this.entitySid;
    }

    /**
     * Returns The Unique identity of the Entity.
     *
     * @return Unique identity of the Entity
     */
    public final String getIdentity() {
        return this.identity;
    }

    /**
     * Returns The Factor Sid..
     *
     * @return Factor Sid.
     */
    public final String getFactorSid() {
        return this.factorSid;
    }

    /**
     * Returns The The date this Challenge was created.
     *
     * @return The date this Challenge was created
     */
    public final DateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The The date this Challenge was updated.
     *
     * @return The date this Challenge was updated
     */
    public final DateTime getDateUpdated() {
        return this.dateUpdated;
    }

    /**
     * Returns The The date this Challenge was responded.
     *
     * @return The date this Challenge was responded
     */
    public final DateTime getDateResponded() {
        return this.dateResponded;
    }

    /**
     * Returns The The date this Challenge is expired.
     *
     * @return The date this Challenge is expired
     */
    public final DateTime getExpirationDate() {
        return this.expirationDate;
    }

    /**
     * Returns The The Status of this Challenge.
     *
     * @return The Status of this Challenge
     */
    public final Challenge.ChallengeStatuses getStatus() {
        return this.status;
    }

    /**
     * Returns The The Reason of this Challenge `status`.
     *
     * @return The Reason of this Challenge `status`
     */
    public final Challenge.ChallengeReasons getRespondedReason() {
        return this.respondedReason;
    }

    /**
     * Returns The Public details provided to contextualize the Challenge.
     *
     * @return Public details provided to contextualize the Challenge
     */
    public final String getDetails() {
        return this.details;
    }

    /**
     * Returns The Hidden details provided to contextualize the Challenge.
     *
     * @return Hidden details provided to contextualize the Challenge
     */
    public final String getHiddenDetails() {
        return this.hiddenDetails;
    }

    /**
     * Returns The The Factor Type of this Challenge.
     *
     * @return The Factor Type of this Challenge
     */
    public final Challenge.FactorTypes getFactorType() {
        return this.factorType;
    }

    /**
     * Returns The The Factor Strength of this Challenge.
     *
     * @return The Factor Strength of this Challenge
     */
    public final Challenge.FactorStrengths getFactorStrength() {
        return this.factorStrength;
    }

    /**
     * Returns The The URL of this resource..
     *
     * @return The URL of this resource.
     */
    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Challenge other = (Challenge) o;

        return Objects.equals(sid, other.sid) &&
               Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(serviceSid, other.serviceSid) &&
               Objects.equals(entitySid, other.entitySid) &&
               Objects.equals(identity, other.identity) &&
               Objects.equals(factorSid, other.factorSid) &&
               Objects.equals(dateCreated, other.dateCreated) &&
               Objects.equals(dateUpdated, other.dateUpdated) &&
               Objects.equals(dateResponded, other.dateResponded) &&
               Objects.equals(expirationDate, other.expirationDate) &&
               Objects.equals(status, other.status) &&
               Objects.equals(respondedReason, other.respondedReason) &&
               Objects.equals(details, other.details) &&
               Objects.equals(hiddenDetails, other.hiddenDetails) &&
               Objects.equals(factorType, other.factorType) &&
               Objects.equals(factorStrength, other.factorStrength) &&
               Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sid,
                            accountSid,
                            serviceSid,
                            entitySid,
                            identity,
                            factorSid,
                            dateCreated,
                            dateUpdated,
                            dateResponded,
                            expirationDate,
                            status,
                            respondedReason,
                            details,
                            hiddenDetails,
                            factorType,
                            factorStrength,
                            url);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                          .add("sid", sid)
                          .add("accountSid", accountSid)
                          .add("serviceSid", serviceSid)
                          .add("entitySid", entitySid)
                          .add("identity", identity)
                          .add("factorSid", factorSid)
                          .add("dateCreated", dateCreated)
                          .add("dateUpdated", dateUpdated)
                          .add("dateResponded", dateResponded)
                          .add("expirationDate", expirationDate)
                          .add("status", status)
                          .add("respondedReason", respondedReason)
                          .add("details", details)
                          .add("hiddenDetails", hiddenDetails)
                          .add("factorType", factorType)
                          .add("factorStrength", factorStrength)
                          .add("url", url)
                          .toString();
    }
}