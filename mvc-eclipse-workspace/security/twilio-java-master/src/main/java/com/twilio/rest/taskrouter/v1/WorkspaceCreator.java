/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.taskrouter.v1;

import com.twilio.base.Creator;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import java.net.URI;

public class WorkspaceCreator extends Creator<Workspace> {
    private final String friendlyName;
    private URI eventCallbackUrl;
    private String eventsFilter;
    private Boolean multiTaskEnabled;
    private String template;
    private Workspace.QueueOrder prioritizeQueueOrder;

    /**
     * Construct a new WorkspaceCreator.
     *
     * @param friendlyName Human readable description of this workspace
     */
    public WorkspaceCreator(final String friendlyName) {
        this.friendlyName = friendlyName;
    }

    /**
     * If provided, the Workspace will publish events to this URL. You can use this
     * to gather data for reporting. See Workspace Events for more information..
     *
     * @param eventCallbackUrl If provided, the Workspace will publish events to
     *                         this URL.
     * @return this
     */
    public WorkspaceCreator setEventCallbackUrl(final URI eventCallbackUrl) {
        this.eventCallbackUrl = eventCallbackUrl;
        return this;
    }

    /**
     * If provided, the Workspace will publish events to this URL. You can use this
     * to gather data for reporting. See Workspace Events for more information..
     *
     * @param eventCallbackUrl If provided, the Workspace will publish events to
     *                         this URL.
     * @return this
     */
    public WorkspaceCreator setEventCallbackUrl(final String eventCallbackUrl) {
        return setEventCallbackUrl(Promoter.uriFromString(eventCallbackUrl));
    }

    /**
     * Use this parameter to receive webhooks on EventCallbackUrl for specific
     * events on a workspace. For example if
     * 'EventsFilter=task.created,task.canceled,worker.activity.update', then
     * TaskRouter will webhook to EventCallbackUrl only when a task is created,
     * canceled or a worker activity is updated..
     *
     * @param eventsFilter Use this parameter to receive webhooks on
     *                     EventCallbackUrl for specific events on a workspace.
     * @return this
     */
    public WorkspaceCreator setEventsFilter(final String eventsFilter) {
        this.eventsFilter = eventsFilter;
        return this;
    }

    /**
     * Multi tasking allows workers to handle multiple tasks simultaneously. When
     * enabled (MultiTaskEnabled=true), each worker will be eligible to receive
     * parallel reservations up to the per-channel maximums defined in the Workers
     * section. Default is disabled (MultiTaskEnabled=false), where each worker will
     * only receive a new reservation when the previous task is completed. Learn
     * more by visiting [Multitasking][/docs/taskrouter/multitasking]..
     *
     * @param multiTaskEnabled Multi tasking allows workers to handle multiple
     *                         tasks simultaneously.
     * @return this
     */
    public WorkspaceCreator setMultiTaskEnabled(final Boolean multiTaskEnabled) {
        this.multiTaskEnabled = multiTaskEnabled;
        return this;
    }

    /**
     * One of the available template names. Will pre-configure this Workspace with
     * the Workflow and Activities specified in the template. "NONE" will create a
     * Workspace with a set of default activities and nothing else. "FIFO" will
     * configure TaskRouter with a set of default activities and a single task queue
     * for first-in, first-out distribution, useful if you want to see a simple
     * TaskRouter configuration when getting started. Defaults to "NONE"..
     *
     * @param template One of the available template names.
     * @return this
     */
    public WorkspaceCreator setTemplate(final String template) {
        this.template = template;
        return this;
    }

    /**
     * Use this parameter to configure whether to prioritize LIFO or FIFO when
     * workers are receiving Tasks from combination of LIFO and FIFO TaskQueues.
     * Default is FIFO. [Click
     * here][/docs/taskrouter/queue-ordering-last-first-out-lifo] to learn more
     * about LIFO and the use of the parameter..
     *
     * @param prioritizeQueueOrder Use this parameter to configure whether to
     *                             prioritize LIFO or FIFO when workers are
     *                             receiving Tasks from combination of LIFO and FIFO
     *                             TaskQueues.
     * @return this
     */
    public WorkspaceCreator setPrioritizeQueueOrder(final Workspace.QueueOrder prioritizeQueueOrder) {
        this.prioritizeQueueOrder = prioritizeQueueOrder;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the create.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Created Workspace
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Workspace create(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.POST,
            Domains.TASKROUTER.toString(),
            "/v1/Workspaces",
            client.getRegion()
        );

        addPostParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Workspace creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return Workspace.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     *
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (friendlyName != null) {
            request.addPostParam("FriendlyName", friendlyName);
        }

        if (eventCallbackUrl != null) {
            request.addPostParam("EventCallbackUrl", eventCallbackUrl.toString());
        }

        if (eventsFilter != null) {
            request.addPostParam("EventsFilter", eventsFilter);
        }

        if (multiTaskEnabled != null) {
            request.addPostParam("MultiTaskEnabled", multiTaskEnabled.toString());
        }

        if (template != null) {
            request.addPostParam("Template", template);
        }

        if (prioritizeQueueOrder != null) {
            request.addPostParam("PrioritizeQueueOrder", prioritizeQueueOrder.toString());
        }
    }
}