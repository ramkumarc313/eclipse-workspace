/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.taskrouter.v1.workspace;

import com.twilio.base.Updater;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

public class TaskUpdater extends Updater<Task> {
    private final String pathWorkspaceSid;
    private final String pathSid;
    private String attributes;
    private Task.Status assignmentStatus;
    private String reason;
    private Integer priority;
    private String taskChannel;

    /**
     * Construct a new TaskUpdater.
     *
     * @param pathWorkspaceSid The workspace_sid
     * @param pathSid The sid
     */
    public TaskUpdater(final String pathWorkspaceSid,
                       final String pathSid) {
        this.pathWorkspaceSid = pathWorkspaceSid;
        this.pathSid = pathSid;
    }

    /**
     * The user-defined JSON data describing the custom attributes of this task..
     *
     * @param attributes The user-defined JSON data describing the custom
     *                   attributes of this task.
     * @return this
     */
    public TaskUpdater setAttributes(final String attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * A 'pending' or 'reserved' Task may be canceled by posting
     * AssignmentStatus='canceled'. Post AssignmentStatus='wrapping' to move Task to
     * 'wrapup' state and AssignmentStatus='completed' to move a Task to 'completed'
     * state..
     *
     * @param assignmentStatus A 'pending' or 'reserved' Task may be canceled by
     *                         posting AssignmentStatus='canceled'.
     * @return this
     */
    public TaskUpdater setAssignmentStatus(final Task.Status assignmentStatus) {
        this.assignmentStatus = assignmentStatus;
        return this;
    }

    /**
     * This is only required if the Task is canceled or completed. This logs the
     * reason the task was either canceled or completed and queues the task for
     * deletion after 5 minutes..
     *
     * @param reason This is only required if the Task is canceled or completed.
     * @return this
     */
    public TaskUpdater setReason(final String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Override priority for the Task. When supplied, the Task will take on the
     * given priority unless it matches a Workflow Target with a Priority set..
     *
     * @param priority Override priority for the Task.
     * @return this
     */
    public TaskUpdater setPriority(final Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * The task_channel.
     *
     * @param taskChannel The task_channel
     * @return this
     */
    public TaskUpdater setTaskChannel(final String taskChannel) {
        this.taskChannel = taskChannel;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the update.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Updated Task
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Task update(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.POST,
            Domains.TASKROUTER.toString(),
            "/v1/Workspaces/" + this.pathWorkspaceSid + "/Tasks/" + this.pathSid + "",
            client.getRegion()
        );

        addPostParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Task update failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return Task.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     *
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (attributes != null) {
            request.addPostParam("Attributes", attributes);
        }

        if (assignmentStatus != null) {
            request.addPostParam("AssignmentStatus", assignmentStatus.toString());
        }

        if (reason != null) {
            request.addPostParam("Reason", reason);
        }

        if (priority != null) {
            request.addPostParam("Priority", priority.toString());
        }

        if (taskChannel != null) {
            request.addPostParam("TaskChannel", taskChannel);
        }
    }
}