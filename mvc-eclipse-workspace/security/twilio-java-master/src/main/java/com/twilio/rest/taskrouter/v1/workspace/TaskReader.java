/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.taskrouter.v1.workspace;

import com.twilio.base.Page;
import com.twilio.base.Reader;
import com.twilio.base.ResourceSet;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import java.util.List;

public class TaskReader extends Reader<Task> {
    private final String pathWorkspaceSid;
    private Integer priority;
    private List<String> assignmentStatus;
    private String workflowSid;
    private String workflowName;
    private String taskQueueSid;
    private String taskQueueName;
    private String evaluateTaskAttributes;
    private String ordering;
    private Boolean hasAddons;

    /**
     * Construct a new TaskReader.
     *
     * @param pathWorkspaceSid The workspace_sid
     */
    public TaskReader(final String pathWorkspaceSid) {
        this.pathWorkspaceSid = pathWorkspaceSid;
    }

    /**
     * Retrieve the list of all Tasks in the workspace with the specified priority..
     *
     * @param priority Retrieve the list of all Tasks in the workspace with the
     *                 specified priority.
     * @return this
     */
    public TaskReader setPriority(final Integer priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Returns the list of all Tasks in the workspace with the specified
     * AssignmentStatus. Allowed AssignmentStatus values are pending, reserved,
     * assigned, canceled, and completed..
     *
     * @param assignmentStatus Returns the list of all Tasks in the workspace with
     *                         the specified AssignmentStatus.
     * @return this
     */
    public TaskReader setAssignmentStatus(final List<String> assignmentStatus) {
        this.assignmentStatus = assignmentStatus;
        return this;
    }

    /**
     * Returns the list of all Tasks in the workspace with the specified
     * AssignmentStatus. Allowed AssignmentStatus values are pending, reserved,
     * assigned, canceled, and completed..
     *
     * @param assignmentStatus Returns the list of all Tasks in the workspace with
     *                         the specified AssignmentStatus.
     * @return this
     */
    public TaskReader setAssignmentStatus(final String assignmentStatus) {
        return setAssignmentStatus(Promoter.listOfOne(assignmentStatus));
    }

    /**
     * Returns the list of Tasks that are being controlled by the Workflow with the
     * specified Sid value..
     *
     * @param workflowSid Returns the list of Tasks that are being controlled by
     *                    the Workflow with the specified Sid value.
     * @return this
     */
    public TaskReader setWorkflowSid(final String workflowSid) {
        this.workflowSid = workflowSid;
        return this;
    }

    /**
     * Returns the list of Tasks that are being controlled by the Workflow with the
     * specified FriendlyName value..
     *
     * @param workflowName Returns the list of Tasks that are being controlled by
     *                     the Workflow with the specified FriendlyName value.
     * @return this
     */
    public TaskReader setWorkflowName(final String workflowName) {
        this.workflowName = workflowName;
        return this;
    }

    /**
     * Returns the list of Tasks that are currently waiting in the TaskQueue
     * identified by the Sid specified..
     *
     * @param taskQueueSid Returns the list of Tasks that are currently waiting in
     *                     the TaskQueue identified by the Sid specified.
     * @return this
     */
    public TaskReader setTaskQueueSid(final String taskQueueSid) {
        this.taskQueueSid = taskQueueSid;
        return this;
    }

    /**
     * Returns the list of Tasks that are currently waiting in the TaskQueue
     * identified by the FriendlyName specified..
     *
     * @param taskQueueName Returns the list of Tasks that are currently waiting in
     *                      the TaskQueue identified by the FriendlyName specified.
     * @return this
     */
    public TaskReader setTaskQueueName(final String taskQueueName) {
        this.taskQueueName = taskQueueName;
        return this;
    }

    /**
     * Provide a task attributes expression, and this will return tasks which match
     * the attributes..
     *
     * @param evaluateTaskAttributes Provide a task attributes expression, and this
     *                               will return tasks which match the attributes.
     * @return this
     */
    public TaskReader setEvaluateTaskAttributes(final String evaluateTaskAttributes) {
        this.evaluateTaskAttributes = evaluateTaskAttributes;
        return this;
    }

    /**
     * Use this parameter to control the order of the Tasks returned. The value
     * should be passed in `Attribute:Order` format, where Attribute can be either
     * `Priority` or `DateCreated` and Order can be either `asc` or `desc`. For
     * example, `Priority:desc` returns Tasks ordered by Priority in descending
     * order. To sort the Tasks by Priority and DateCreated pass
     * `Priority:desc,DateCreated:asc`. By Default Tasks are returned sorted by
     * DateCreated in ascending order..
     *
     * @param ordering Use this parameter to control the order of the Tasks
     *                 returned.
     * @return this
     */
    public TaskReader setOrdering(final String ordering) {
        this.ordering = ordering;
        return this;
    }

    /**
     * The has_addons.
     *
     * @param hasAddons The has_addons
     * @return this
     */
    public TaskReader setHasAddons(final Boolean hasAddons) {
        this.hasAddons = hasAddons;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the read.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Task ResourceSet
     */
    @Override
    public ResourceSet<Task> read(final TwilioRestClient client) {
        return new ResourceSet<>(this, client, firstPage(client));
    }

    /**
     * Make the request to the Twilio API to perform the read.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Task ResourceSet
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Page<Task> firstPage(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            Domains.TASKROUTER.toString(),
            "/v1/Workspaces/" + this.pathWorkspaceSid + "/Tasks",
            client.getRegion()
        );

        addQueryParams(request);
        return pageForRequest(client, request);
    }

    /**
     * Retrieve the target page from the Twilio API.
     *
     * @param targetUrl API-generated URL for the requested results page
     * @param client TwilioRestClient with which to make the request
     * @return Task ResourceSet
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Page<Task> getPage(final String targetUrl, final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            targetUrl
        );

        return pageForRequest(client, request);
    }

    /**
     * Retrieve the next page from the Twilio API.
     *
     * @param page current page
     * @param client TwilioRestClient with which to make the request
     * @return Next Page
     */
    @Override
    public Page<Task> nextPage(final Page<Task> page,
                               final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getNextPageUrl(
                Domains.TASKROUTER.toString(),
                client.getRegion()
            )
        );
        return pageForRequest(client, request);
    }

    /**
     * Retrieve the previous page from the Twilio API.
     *
     * @param page current page
     * @param client TwilioRestClient with which to make the request
     * @return Previous Page
     */
    @Override
    public Page<Task> previousPage(final Page<Task> page,
                                   final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getPreviousPageUrl(
                Domains.TASKROUTER.toString(),
                client.getRegion()
            )
        );
        return pageForRequest(client, request);
    }

    /**
     * Generate a Page of Task Resources for a given request.
     *
     * @param client TwilioRestClient with which to make the request
     * @param request Request to generate a page for
     * @return Page for the Request
     */
    private Page<Task> pageForRequest(final TwilioRestClient client, final Request request) {
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Task read failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return Page.fromJson(
            "tasks",
            response.getContent(),
            Task.class,
            client.getObjectMapper()
        );
    }

    /**
     * Add the requested query string arguments to the Request.
     *
     * @param request Request to add query string arguments to
     */
    private void addQueryParams(final Request request) {
        if (priority != null) {
            request.addQueryParam("Priority", priority.toString());
        }

        if (assignmentStatus != null) {
            for (String prop : assignmentStatus) {
                request.addQueryParam("AssignmentStatus", prop);
            }
        }

        if (workflowSid != null) {
            request.addQueryParam("WorkflowSid", workflowSid);
        }

        if (workflowName != null) {
            request.addQueryParam("WorkflowName", workflowName);
        }

        if (taskQueueSid != null) {
            request.addQueryParam("TaskQueueSid", taskQueueSid);
        }

        if (taskQueueName != null) {
            request.addQueryParam("TaskQueueName", taskQueueName);
        }

        if (evaluateTaskAttributes != null) {
            request.addQueryParam("EvaluateTaskAttributes", evaluateTaskAttributes);
        }

        if (ordering != null) {
            request.addQueryParam("Ordering", ordering);
        }

        if (hasAddons != null) {
            request.addQueryParam("HasAddons", hasAddons.toString());
        }

        if (getPageSize() != null) {
            request.addQueryParam("PageSize", Integer.toString(getPageSize()));
        }
    }
}