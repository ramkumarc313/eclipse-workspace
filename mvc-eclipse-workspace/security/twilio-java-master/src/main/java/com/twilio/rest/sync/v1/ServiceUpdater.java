/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.sync.v1;

import com.twilio.base.Updater;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import java.net.URI;

/**
 * PLEASE NOTE that this class contains beta products that are subject to
 * change. Use them with caution.
 */
public class ServiceUpdater extends Updater<Service> {
    private final String pathSid;
    private URI webhookUrl;
    private String friendlyName;
    private Boolean reachabilityWebhooksEnabled;
    private Boolean aclEnabled;
    private Boolean reachabilityDebouncingEnabled;
    private Integer reachabilityDebouncingWindow;

    /**
     * Construct a new ServiceUpdater.
     *
     * @param pathSid A unique identifier for this service instance.
     */
    public ServiceUpdater(final String pathSid) {
        this.pathSid = pathSid;
    }

    /**
     * A URL that will receive event updates when objects are manipulated..
     *
     * @param webhookUrl A URL that will receive event updates when objects are
     *                   manipulated.
     * @return this
     */
    public ServiceUpdater setWebhookUrl(final URI webhookUrl) {
        this.webhookUrl = webhookUrl;
        return this;
    }

    /**
     * A URL that will receive event updates when objects are manipulated..
     *
     * @param webhookUrl A URL that will receive event updates when objects are
     *                   manipulated.
     * @return this
     */
    public ServiceUpdater setWebhookUrl(final String webhookUrl) {
        return setWebhookUrl(Promoter.uriFromString(webhookUrl));
    }

    /**
     * Human-readable name for this service instance.
     *
     * @param friendlyName Human-readable name for this service instance
     * @return this
     */
    public ServiceUpdater setFriendlyName(final String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * True or false - controls whether this instance fires webhooks when client
     * endpoints connect to Sync Defaults to false..
     *
     * @param reachabilityWebhooksEnabled True or false - controls whether this
     *                                    instance fires webhooks when client
     *                                    endpoints connect to Sync
     * @return this
     */
    public ServiceUpdater setReachabilityWebhooksEnabled(final Boolean reachabilityWebhooksEnabled) {
        this.reachabilityWebhooksEnabled = reachabilityWebhooksEnabled;
        return this;
    }

    /**
     * `true` or `false` - determines whether token identities must be granted
     * access to Sync objects via the [Permissions
     * API](https://www.twilio.com/docs/api/sync/rest/sync-rest-api-permissions) in
     * this Service..
     *
     * @param aclEnabled true or false - determines whether token identities must
     *                   be granted access to Sync objects via the Permissions API
     *                   in this Service.
     * @return this
     */
    public ServiceUpdater setAclEnabled(final Boolean aclEnabled) {
        this.aclEnabled = aclEnabled;
        return this;
    }

    /**
     * `true` or `false` - If false, every endpoint disconnection immediately yields
     * a reachability webhook (if enabled). If true, then 'disconnection' webhook
     * events will only be fired after a configurable delay. Intervening
     * reconnections would effectively cancel that webhook. Defaults to false..
     *
     * @param reachabilityDebouncingEnabled true or false - Determines whether
     *                                      transient disconnections (i.e. an
     *                                      immediate reconnect succeeds) cause
     *                                      reachability webhooks.
     * @return this
     */
    public ServiceUpdater setReachabilityDebouncingEnabled(final Boolean reachabilityDebouncingEnabled) {
        this.reachabilityDebouncingEnabled = reachabilityDebouncingEnabled;
        return this;
    }

    /**
     * Reachability webhook delay period in milliseconds. Determines the delay after
     * which a Sync identity is declared actually offline, measured from the moment
     * the last running client disconnects. If all endpoints remain offline
     * throughout this delay, then reachability webhooks will be fired (if enabled).
     * A reconnection by any endpoint during this window — from the same identity —
     * means no reachability webhook would be fired. Must be between 1000 and 30000.
     * Defaults to 5000..
     *
     * @param reachabilityDebouncingWindow Determines how long an identity must be
     *                                     offline before reachability webhooks
     *                                     fire.
     * @return this
     */
    public ServiceUpdater setReachabilityDebouncingWindow(final Integer reachabilityDebouncingWindow) {
        this.reachabilityDebouncingWindow = reachabilityDebouncingWindow;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the update.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Updated Service
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Service update(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.POST,
            Domains.SYNC.toString(),
            "/v1/Services/" + this.pathSid + "",
            client.getRegion()
        );

        addPostParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("Service update failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return Service.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     *
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (webhookUrl != null) {
            request.addPostParam("WebhookUrl", webhookUrl.toString());
        }

        if (friendlyName != null) {
            request.addPostParam("FriendlyName", friendlyName);
        }

        if (reachabilityWebhooksEnabled != null) {
            request.addPostParam("ReachabilityWebhooksEnabled", reachabilityWebhooksEnabled.toString());
        }

        if (aclEnabled != null) {
            request.addPostParam("AclEnabled", aclEnabled.toString());
        }

        if (reachabilityDebouncingEnabled != null) {
            request.addPostParam("ReachabilityDebouncingEnabled", reachabilityDebouncingEnabled.toString());
        }

        if (reachabilityDebouncingWindow != null) {
            request.addPostParam("ReachabilityDebouncingWindow", reachabilityDebouncingWindow.toString());
        }
    }
}