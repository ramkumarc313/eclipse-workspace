/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.video.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.MoreObjects;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import org.joda.time.DateTime;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * PLEASE NOTE that this class contains preview products that are subject to
 * change. Use them with caution. If you currently do not have developer preview
 * access, please contact help@twilio.com.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class CompositionHook extends Resource {
    private static final long serialVersionUID = 281311376768009L;

    public enum Format {
        MP4("mp4"),
        WEBM("webm");

        private final String value;

        private Format(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a Format from a string.
         * @param value string value
         * @return generated Format
         */
        @JsonCreator
        public static Format forValue(final String value) {
            return Promoter.enumFromString(value, Format.values());
        }
    }

    /**
     * Create a CompositionHookFetcher to execute fetch.
     *
     * @param pathSid The Composition Hook Sid that uniquely identifies the
     *                Composition Hook to fetch.
     * @return CompositionHookFetcher capable of executing the fetch
     */
    public static CompositionHookFetcher fetcher(final String pathSid) {
        return new CompositionHookFetcher(pathSid);
    }

    /**
     * Create a CompositionHookReader to execute read.
     *
     * @return CompositionHookReader capable of executing the read
     */
    public static CompositionHookReader reader() {
        return new CompositionHookReader();
    }

    /**
     * Create a CompositionHookDeleter to execute delete.
     *
     * @param pathSid The Recording Composition Hook Sid that uniquely identifies
     *                the Recording Composition Hook to delete.
     * @return CompositionHookDeleter capable of executing the delete
     */
    public static CompositionHookDeleter deleter(final String pathSid) {
        return new CompositionHookDeleter(pathSid);
    }

    /**
     * Create a CompositionHookCreator to execute create.
     *
     * @param friendlyName Friendly name of the Composition Hook to be shown in the
     *                     console.
     * @return CompositionHookCreator capable of executing the create
     */
    public static CompositionHookCreator creator(final String friendlyName) {
        return new CompositionHookCreator(friendlyName);
    }

    /**
     * Create a CompositionHookUpdater to execute update.
     *
     * @param pathSid A 34-character string that uniquely identifies the
     *                Composition Hook to update, specified as a path parameter.
     * @param friendlyName Friendly name of the Composition Hook to be shown in the
     *                     console.
     * @return CompositionHookUpdater capable of executing the update
     */
    public static CompositionHookUpdater updater(final String pathSid,
                                                 final String friendlyName) {
        return new CompositionHookUpdater(pathSid, friendlyName);
    }

    /**
     * Converts a JSON String into a CompositionHook object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return CompositionHook object represented by the provided JSON
     */
    public static CompositionHook fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, CompositionHook.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a CompositionHook object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return CompositionHook object represented by the provided JSON
     */
    public static CompositionHook fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, CompositionHook.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final String friendlyName;
    private final Boolean enabled;
    private final DateTime dateCreated;
    private final String dateUpdated;
    private final String sid;
    private final List<String> audioSources;
    private final List<String> audioSourcesExcluded;
    private final Map<String, Object> videoLayout;
    private final String resolution;
    private final Boolean trim;
    private final CompositionHook.Format format;
    private final String statusCallback;
    private final HttpMethod statusCallbackMethod;
    private final URI url;

    @JsonCreator
    private CompositionHook(@JsonProperty("account_sid")
                            final String accountSid,
                            @JsonProperty("friendly_name")
                            final String friendlyName,
                            @JsonProperty("enabled")
                            final Boolean enabled,
                            @JsonProperty("date_created")
                            final String dateCreated,
                            @JsonProperty("date_updated")
                            final String dateUpdated,
                            @JsonProperty("sid")
                            final String sid,
                            @JsonProperty("audio_sources")
                            final List<String> audioSources,
                            @JsonProperty("audio_sources_excluded")
                            final List<String> audioSourcesExcluded,
                            @JsonProperty("video_layout")
                            final Map<String, Object> videoLayout,
                            @JsonProperty("resolution")
                            final String resolution,
                            @JsonProperty("trim")
                            final Boolean trim,
                            @JsonProperty("format")
                            final CompositionHook.Format format,
                            @JsonProperty("status_callback")
                            final String statusCallback,
                            @JsonProperty("status_callback_method")
                            final HttpMethod statusCallbackMethod,
                            @JsonProperty("url")
                            final URI url) {
        this.accountSid = accountSid;
        this.friendlyName = friendlyName;
        this.enabled = enabled;
        this.dateCreated = DateConverter.iso8601DateTimeFromString(dateCreated);
        this.dateUpdated = dateUpdated;
        this.sid = sid;
        this.audioSources = audioSources;
        this.audioSourcesExcluded = audioSourcesExcluded;
        this.videoLayout = videoLayout;
        this.resolution = resolution;
        this.trim = trim;
        this.format = format;
        this.statusCallback = statusCallback;
        this.statusCallbackMethod = statusCallbackMethod;
        this.url = url;
    }

    /**
     * Returns The Twilio Account SID..
     *
     * @return Twilio Account SID.
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns The Friendly name of the Composition Hook to be shown in the
     * console..
     *
     * @return Friendly name of the Composition Hook to be shown in the console.
     */
    public final String getFriendlyName() {
        return this.friendlyName;
    }

    /**
     * Returns The Boolean flag indicating if the Composition Hook is active..
     *
     * @return Boolean flag indicating if the Composition Hook is active.
     */
    public final Boolean getEnabled() {
        return this.enabled;
    }

    /**
     * Returns The Date when the Composition Hook Resource was created..
     *
     * @return Date when the Composition Hook Resource was created.
     */
    public final DateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The Date when the Composition Hook was last updated..
     *
     * @return Date when the Composition Hook was last updated.
     */
    public final String getDateUpdated() {
        return this.dateUpdated;
    }

    /**
     * Returns The A 34-character string that uniquely identifies this Composition
     * Hook..
     *
     * @return A 34-character string that uniquely identifies this Composition Hook.
     */
    public final String getSid() {
        return this.sid;
    }

    /**
     * Returns The A list of audio sources related to this Composition Hook..
     *
     * @return A list of audio sources related to this Composition Hook.
     */
    public final List<String> getAudioSources() {
        return this.audioSources;
    }

    /**
     * Returns The A list of audio sources excluded related to this Composition
     * Hook..
     *
     * @return A list of audio sources excluded related to this Composition Hook.
     */
    public final List<String> getAudioSourcesExcluded() {
        return this.audioSourcesExcluded;
    }

    /**
     * Returns The The JSON video layout description..
     *
     * @return The JSON video layout description.
     */
    public final Map<String, Object> getVideoLayout() {
        return this.videoLayout;
    }

    /**
     * Returns The Pixel resolution of the composed video..
     *
     * @return Pixel resolution of the composed video.
     */
    public final String getResolution() {
        return this.resolution;
    }

    /**
     * Returns The Boolean flag for clipping intervals that have no media..
     *
     * @return Boolean flag for clipping intervals that have no media.
     */
    public final Boolean getTrim() {
        return this.trim;
    }

    /**
     * Returns The The file format for the Compositions triggered by the Composition
     * Hook..
     *
     * @return The file format for the Compositions triggered by the Composition
     *         Hook.
     */
    public final CompositionHook.Format getFormat() {
        return this.format;
    }

    /**
     * Returns The A URL that Twilio sends asynchronous webhook requests to on every
     * composition event..
     *
     * @return A URL that Twilio sends asynchronous webhook requests to on every
     *         composition event.
     */
    public final String getStatusCallback() {
        return this.statusCallback;
    }

    /**
     * Returns The HTTP method Twilio should use when requesting the above URL..
     *
     * @return HTTP method Twilio should use when requesting the above URL.
     */
    public final HttpMethod getStatusCallbackMethod() {
        return this.statusCallbackMethod;
    }

    /**
     * Returns The The absolute URL for this resource..
     *
     * @return The absolute URL for this resource.
     */
    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CompositionHook other = (CompositionHook) o;

        return Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(friendlyName, other.friendlyName) &&
               Objects.equals(enabled, other.enabled) &&
               Objects.equals(dateCreated, other.dateCreated) &&
               Objects.equals(dateUpdated, other.dateUpdated) &&
               Objects.equals(sid, other.sid) &&
               Objects.equals(audioSources, other.audioSources) &&
               Objects.equals(audioSourcesExcluded, other.audioSourcesExcluded) &&
               Objects.equals(videoLayout, other.videoLayout) &&
               Objects.equals(resolution, other.resolution) &&
               Objects.equals(trim, other.trim) &&
               Objects.equals(format, other.format) &&
               Objects.equals(statusCallback, other.statusCallback) &&
               Objects.equals(statusCallbackMethod, other.statusCallbackMethod) &&
               Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountSid,
                            friendlyName,
                            enabled,
                            dateCreated,
                            dateUpdated,
                            sid,
                            audioSources,
                            audioSourcesExcluded,
                            videoLayout,
                            resolution,
                            trim,
                            format,
                            statusCallback,
                            statusCallbackMethod,
                            url);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                          .add("accountSid", accountSid)
                          .add("friendlyName", friendlyName)
                          .add("enabled", enabled)
                          .add("dateCreated", dateCreated)
                          .add("dateUpdated", dateUpdated)
                          .add("sid", sid)
                          .add("audioSources", audioSources)
                          .add("audioSourcesExcluded", audioSourcesExcluded)
                          .add("videoLayout", videoLayout)
                          .add("resolution", resolution)
                          .add("trim", trim)
                          .add("format", format)
                          .add("statusCallback", statusCallback)
                          .add("statusCallbackMethod", statusCallbackMethod)
                          .add("url", url)
                          .toString();
    }
}