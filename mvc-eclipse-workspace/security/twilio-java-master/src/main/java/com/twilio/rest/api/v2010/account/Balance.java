/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.api.v2010.account;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.MoreObjects;
import com.twilio.base.Resource;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Balance extends Resource {
    private static final long serialVersionUID = 237340404453814L;

    /**
     * Create a BalanceFetcher to execute fetch.
     *
     * @param pathAccountSid Account Sid.
     * @return BalanceFetcher capable of executing the fetch
     */
    public static BalanceFetcher fetcher(final String pathAccountSid) {
        return new BalanceFetcher(pathAccountSid);
    }

    /**
     * Create a BalanceFetcher to execute fetch.
     *
     * @return BalanceFetcher capable of executing the fetch
     */
    public static BalanceFetcher fetcher() {
        return new BalanceFetcher();
    }

    /**
     * Converts a JSON String into a Balance object using the provided ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return Balance object represented by the provided JSON
     */
    public static Balance fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Balance.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a Balance object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return Balance object represented by the provided JSON
     */
    public static Balance fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, Balance.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String accountSid;
    private final String balance;
    private final String currency;

    @JsonCreator
    private Balance(@JsonProperty("account_sid")
                    final String accountSid,
                    @JsonProperty("balance")
                    final String balance,
                    @JsonProperty("currency")
                    final String currency) {
        this.accountSid = accountSid;
        this.balance = balance;
        this.currency = currency;
    }

    /**
     * Returns The Account Sid..
     *
     * @return Account Sid.
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns The Account balance.
     *
     * @return Account balance
     */
    public final String getBalance() {
        return this.balance;
    }

    /**
     * Returns The Currency units.
     *
     * @return Currency units
     */
    public final String getCurrency() {
        return this.currency;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Balance other = (Balance) o;

        return Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(balance, other.balance) &&
               Objects.equals(currency, other.currency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountSid,
                            balance,
                            currency);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                          .add("accountSid", accountSid)
                          .add("balance", balance)
                          .add("currency", currency)
                          .toString();
    }
}