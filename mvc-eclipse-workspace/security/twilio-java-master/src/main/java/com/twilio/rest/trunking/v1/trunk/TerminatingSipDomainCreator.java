/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.trunking.v1.trunk;

import com.twilio.base.Creator;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;

public class TerminatingSipDomainCreator extends Creator<TerminatingSipDomain> {
    private final String pathTrunkSid;
    private final String sipDomainSid;

    /**
     * Construct a new TerminatingSipDomainCreator.
     *
     * @param pathTrunkSid The SID of the Trunk to which we should route calls
     * @param sipDomainSid The SID of the SIP Domain to associate with the trunk
     */
    public TerminatingSipDomainCreator(final String pathTrunkSid,
                                       final String sipDomainSid) {
        this.pathTrunkSid = pathTrunkSid;
        this.sipDomainSid = sipDomainSid;
    }

    /**
     * Make the request to the Twilio API to perform the create.
     *
     * @param client TwilioRestClient with which to make the request
     * @return Created TerminatingSipDomain
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public TerminatingSipDomain create(final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.POST,
            Domains.TRUNKING.toString(),
            "/v1/Trunks/" + this.pathTrunkSid + "/TerminatingSipDomains",
            client.getRegion()
        );

        addPostParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException("TerminatingSipDomain creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }

            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }

        return TerminatingSipDomain.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     *
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (sipDomainSid != null) {
            request.addPostParam("SipDomainSid", sipDomainSid);
        }
    }
}