<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><id>tag:blogger.com,1999:blog-2964959029992147971</id><updated>2015-02-28T16:52:48.663+05:30</updated><category term="Java SE" /><category term="Java Programs" /><category term="Core java Interview Questions" /><category term="Java EE" /><category term="Collections" /><category term="Find Output of Program" /><category term="Java 8" /><category term="JDBC" /><category term="Servlets Tutorial" /><title type="text"> Instance Of Java</title><subtitle type="html">Instance of Java. A place where you can learn java in simple way each and every topic covered with many points and sample programs.</subtitle><link rel="alternate" type="text/html" href="http://www.instanceofjava.com/" /><link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default?start-index=26&amp;max-results=25&amp;redirect=false" /><author><name>instance of java</name><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><generator version="7.00" uri="http://www.blogger.com">Blogger</generator><openSearch:totalResults>130</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/InstanceOfJava" /><feedburner:info uri="instanceofjava" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><feedburner:emailServiceId>InstanceOfJava</feedburner:emailServiceId><feedburner:feedburnerHostname>https://feedburner.google.com</feedburner:feedburnerHostname><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-4075292288336978204</id><published>2015-02-22T18:05:00.002+05:30</published><updated>2015-02-28T08:58:14.897+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java 8" /><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Java 8 Interface Static and Default Methods</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-o8jZHD13fpA/VOnfgSWXJDI/AAAAAAAAAPw/GL64tbMBKVM/s1600/java8int.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java 8 interface static and default methods" border="0" src="http://2.bp.blogspot.com/-o8jZHD13fpA/VOnfgSWXJDI/AAAAAAAAAPw/GL64tbMBKVM/s1600/java8int.png" height="320" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Java 8 introduced two new methods in interface they are&lt;br /&gt;1.default methods&lt;br /&gt;2.static methods&lt;/li&gt;&lt;li&gt;By this interfaces and abstract class are same but still having lot differences like abstract class can have a constructor etc will discuss more before that we need to know about these Java 8 features of interfaces.&lt;/li&gt;&lt;li&gt;Defaults methods are also called as defender methods can be implemented inside the interface&lt;/li&gt;&lt;li&gt;Like normal class now with java 8 we can declare static methods in side a interface.&lt;/li&gt;&lt;li&gt;Lets jump deep into Java 8 default and static methods&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;1.Interface Default Methods in Java 8&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Before Java 8 in interfaces we can and able to declare only abstract methods only.&lt;/li&gt;&lt;li&gt;If we declare a method without abstract that will be treated as abstract by default.&lt;/li&gt;&lt;li&gt;As we know all methods in interfaces are by default abstract methods.&lt;/li&gt;&lt;li&gt;These methods wont have body means implementations&lt;/li&gt;&lt;li&gt;The class which is implementing this interface need to provide body / implementation for this abstract methods.&lt;/li&gt;&lt;li&gt;Now with java 8 &lt;b&gt;default methods&lt;/b&gt; we can add methods to interface without disturbing existing functionality.&lt;/li&gt;&lt;li&gt;So instead of overriding now we can inherit these default methods from interfaces&lt;/li&gt;&lt;li&gt;Defaults methods are also&amp;nbsp; known as defender methods or virtual extension methods&lt;/li&gt;&lt;li&gt;Default methods will help us to avoid utility classes.&lt;/li&gt;&lt;li&gt;We can define utility methods inside the interface and use it in all classes which is implementing.&lt;/li&gt;&lt;li&gt;One of the major reason to introduce this default methods in java 8 is to support lambda expressions in collections API and to enhance.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface Java8Interface{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;abstract void show();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void display(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("default method of interface");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class Sample implements Java8Interface {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;void show(){&lt;/li&gt;&lt;li class="alt"&gt;System.out.print("overridden method ") &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Sample obj= new Sample();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;obj.show(); // calling implemented method&lt;/li&gt;&lt;li class="alt"&gt;obj.display(); // calling inherited method&lt;/li&gt;&lt;li class="alt"&gt;Java8Interface.display(); calling using interface name&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Output:&lt;/h4&gt;&lt;h4&gt;&amp;nbsp;&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;overridden method &lt;/li&gt;&lt;li class="alt"&gt;default method of interface&lt;/li&gt;&lt;li class="alt"&gt;default method of interface &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;How to call default methods:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can all these default methods by using interface name and also by using object of the class which is implementing.&lt;/li&gt;&lt;li&gt;From above example&lt;/li&gt;&lt;li class="alt"&gt;obj.show(); // calling implemented method&lt;/li&gt;&lt;li class="alt"&gt;obj.display(); // calling inherited method&lt;/li&gt;&lt;li class="alt"&gt;Java8Interface.display(); calling using interface name&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Can we override java 8 default method&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;As we discussed above default methods in interfaces are implemented methods with bodies&lt;/li&gt;&lt;li&gt;Yes we can override same method in class which is implementing this interface.&lt;/li&gt;&lt;li&gt;Lets see one sample program how to override and what happens if we override &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface InterfaceWithDefault{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void defMethod(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("default method of interface");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class Demo implements InterfaceWithDefault{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;void defMethod(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.print("overridden method in class Demo ")&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Demo obj= new Demo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;obj.defMethod(); // calling overridden method&lt;/li&gt;&lt;li class="alt"&gt;Java8Interface.defMethod(); calling using interface name : interface defMethod will be called&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Output:&lt;/h4&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;overridden method in class Demo &lt;/li&gt;&lt;li class="alt"&gt;default method of interface&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;What happens if we implement two interfaces having same default methods&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Now lets see if a class implementing two interfaces which are having same default methods&lt;/li&gt;&lt;li&gt;Whatever the implementation in the two interfaces defined if we implementing two interfaces which are having a default method in both then compilation error will come if two methods have same signature. works fine if two methods have same name with different arguments.&lt;/li&gt;&lt;li&gt;Check the below example programs to understand more.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface A{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void defMethod(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("default method of interface: A");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface B{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void defMethod(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("default method of interface: B");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class Demo implements A, B{ // compilation error will come&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Demo obj= new Demo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If we implement two interfaces which are having same method with same parameters then compilation error will occur. &lt;/li&gt;&lt;li&gt;Duplicate default methods named "&lt;b&gt;defMethod&lt;/b&gt;" with the parameters () and () are inherited from the types A and B.&lt;/li&gt;&lt;li&gt;If we define two methods with different type of parameters then we can work with both interfaces.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface A{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void defMethod(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Default method of interface: A");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface B{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void defMethod(String str){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Default method of interface: B");&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(str);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class Demo implements A, B{ // compilation error will come&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Demo obj= new Demo();&lt;/li&gt;&lt;li class="alt"&gt;obj.defMethod();&lt;/li&gt;&lt;li class="alt"&gt;obj.defMethod("Java 8") &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Output:&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;Default method of interface: A&lt;/li&gt;&lt;li class="alt"&gt;Default method of interface: B&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Java 8&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;1.Interface Static Methods in Java 8&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Another Java 8 interface method is static method.&lt;/li&gt;&lt;li&gt;Now we can define static methods inside interface but we can not override these static methods.&lt;/li&gt;&lt;li&gt;These static method will act as helper methods.&lt;/li&gt;&lt;li&gt;These methods are the parts of interface not belongs to implementation class objects. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface StaticInterface{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;Static &lt;/b&gt;void print(String str){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Static method of interface:"+str);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class Demo implements StaticInterface{ &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;StaticInterface.print("Java 8")&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Output:&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;Static method of interface: Java 8&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/I7Hin9rOp8U" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/4075292288336978204/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/java-8-interface-static-default-methods.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4075292288336978204" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4075292288336978204" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/I7Hin9rOp8U/java-8-interface-static-default-methods.html" title="Java 8 Interface Static and Default Methods" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-o8jZHD13fpA/VOnfgSWXJDI/AAAAAAAAAPw/GL64tbMBKVM/s72-c/java8int.png" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/java-8-interface-static-default-methods.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-4977843740399332269</id><published>2015-02-16T15:49:00.002+05:30</published><updated>2015-02-27T21:48:09.309+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java 8" /><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text"> 8 New Java 8 Features</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-0xJ98WQyp7M/VOHXKN_pBoI/AAAAAAAAAKk/21oNrLUKOqs/s1600/java88.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java 8 features" border="0" src="http://2.bp.blogspot.com/-0xJ98WQyp7M/VOHXKN_pBoI/AAAAAAAAAKk/21oNrLUKOqs/s1600/java88.jpg" height="309" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Default and Static methods in Interface&lt;/li&gt;&lt;li&gt;Lambda Expressions &lt;/li&gt;&lt;li&gt;Optional&lt;/li&gt;&lt;li&gt;Streams&lt;/li&gt;&lt;li&gt;Method References &lt;/li&gt;&lt;li&gt;Data Time API &lt;/li&gt;&lt;li&gt;Nashorn Javascript Engine&lt;/li&gt;&lt;li&gt;Parallel Arrays&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;1.Default and Static methods in Interface :&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Java 8 introduces new features to interfaces.&lt;/li&gt;&lt;li&gt;Before java 8 interface having only abstract methods but now java 8 added two more type of methods to interface !.&lt;/li&gt;&lt;li&gt;First one is default method. A method which is having a default keyword with method body.&lt;/li&gt;&lt;li&gt;Actually interfaces wont have any implemented methods&amp;nbsp; but now with java 8 default method we can add a method with default implementation by using "default " keyword.&lt;/li&gt;&lt;li&gt;The classes which are implementing this interface can use these default method and same time it can override the existing method. But its not mandatory to override.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface Java8InterfaceDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;abstract void add();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void display(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("default method of interface");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The second new method introduced in java 8 is static method.&lt;/li&gt;&lt;li&gt;Yes like in classes now we can define a static methods inside interface by using "static".&lt;/li&gt;&lt;li&gt;Basically static methods which are defined in interface are interface level only. if we want to call these static methods which are defined in interfaces we need to use interface name so that we can access these methods.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface Java8InterfaceDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;abstract void add();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;default &lt;/b&gt;void display(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("default method of interface");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void show(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("static method of interface");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;2.Lambda Expressions&amp;nbsp;&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;One of the most awaited and biggest release in java 8 is lamda expressions.&lt;/li&gt;&lt;li&gt;Ability to pass functionality/ behavior&amp;nbsp; to methods as arguments.&lt;/li&gt;&lt;li&gt;Allows us to write a method in the same place we are going to use it.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;interface JavalamdaExpression{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;Arrays.asList( "j", "a", "v" ,"a","8").forEach( e -&amp;gt; System.out.print( e ) ); &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;// java8&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3.java.util.Optional:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;One of the best and cool feature of java 8 is Optional class. Which is a final calls from java.util package.&lt;/li&gt;&lt;li&gt;The major repeating statement in every project is checking "&lt;b&gt;NullPointerException&lt;/b&gt;". Before using any object we need to check whether it is null or not if its not null then only we need to proceed.&lt;/li&gt;&lt;li&gt;Optional is just like a container which holds a value of type &amp;lt;T&amp;gt; or "null". By using isPresent() method of Optional class we can check particular object is null not not. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Optional: &lt;/li&gt;&lt;li class="alt"&gt;class Java8OptionalDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args ){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;Optional&amp;lt; String &amp;gt; str = Optional.ofNullable( null );&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println( "str having value ? " + str.isPresent() ); // output : str having value ? &lt;b&gt;false&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;4.Streams:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;One of the excellent feature from java 8 as java.util.stream.&lt;/li&gt;&lt;li&gt;Stream API&amp;nbsp; introduces real-world functional-style programming into the Java.&lt;/li&gt;&lt;li&gt;Provides functional operations on stream of elements such as list , set and map&amp;nbsp;&lt;/li&gt;&lt;li&gt;Supports filtering, mapping and removal of duplicates of elements in collections, are implemented lazily.&lt;/li&gt;&lt;li&gt;Now we can get Streams from collections, arrays and bufferedReaders etc.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Arrays;&lt;/li&gt;&lt;li class="alt"&gt;class Java8StreamsDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args ){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; Arrays.stream(new int[] {1, 2, 3,4,5})&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .map(n -&amp;gt; 2 * n + 1)&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; .average()&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .ifPresent(System.out::println); // output: 7.0&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&lt;/h4&gt;&lt;h3 style="text-align: left;"&gt;5.Method Reference:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can use lambda expressions to create anonymous methods.&amp;nbsp; &lt;/li&gt;&lt;li&gt;Sometimes, however, a lambda expression does nothing but call an existing method. &lt;br /&gt;In those cases, it's often clearer to refer to the existing method by name. &lt;/li&gt;&lt;li&gt;Using Method references refer to the existing method by name, they are compact, easy-to-read lambda expressions for methods that already have a name &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Arrays;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;class Java8MethodRef{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public&amp;nbsp; void show(String str){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(str);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args ){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; Arrays.asList("a", "b", "c").forEach(new A()::show); // a b c&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;6.Data Time API&amp;nbsp;&amp;nbsp; &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The next cool feature from java 8 is new date time API(jsr 310) added within java.time package.&lt;/li&gt;&lt;li&gt;Before java 8 if we want to &lt;a href="http://www.instanceofjava.com/2014/12/convert-string-to-date-in-java.html" target="_blank"&gt;format dates&lt;/a&gt; we use SimpleDateFormatter class in java 8 while declaring date itself it has constructor to pass format of date.&lt;/li&gt;&lt;li&gt;&amp;nbsp;Some of the new classes introduced in java 8 date time are as follows.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;LocalTime &lt;/li&gt;&lt;li&gt;LocalDate&amp;nbsp;&lt;/li&gt;&lt;li&gt;LocalDateTime&lt;/li&gt;&lt;li&gt;OffsetDate&lt;/li&gt;&lt;li&gt;OffsetTime&lt;/li&gt;&lt;li&gt;OffsetDateTime &lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Arrays;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;class Java8DateTimeAPI{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args ){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; LocalDate currentDate = LocalDate.now();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; System.out.println(currentDate);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; LocalDate twentyMarch2015 = LocalDate.of(2015, Month.MARCH, 06);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(twentyMarch2015);&amp;nbsp; //&lt;b&gt;2015-03-06&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LocalDate firstApril2015 = LocalDate.of(2015, 4, 1);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; System.out.println(firstApril2015);//&lt;b&gt;2015-04-01&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;7.Nashorn Javascript Engine&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Java 8 come with new Nashorn Javascript Engine which is allowing us to develop and run JavaScript applications.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;import javax.script.ScriptEngine;&lt;/li&gt;&lt;li class="alt"&gt;import javax.script.ScriptEngineManager;&lt;/li&gt;&lt;li class="alt"&gt;import javax.script.ScriptException; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Arrays;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;class Java8JavaScript{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args ){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; ScriptEngineManager manager = new ScriptEngineManager();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; ScriptEngine engine = manager.getEngineByName( "JavaScript" );&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println( engine.getClass().getName() );&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println( "output:" + engine.eval( "function show() { return 10; }; show();" ) );&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;jdk.nashorn.api.scripting.NashornScriptEngine&lt;/li&gt;&lt;li class="alt"&gt;output:10&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;8.Parallel Array Sorting&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;As of now java 7 we already having Arrays.sort() method to sort objects now java 8 introduced parallel sorting which has more speed than arrays.sort() and follows Fork/Join framework introduced in Java 7 to assign the sorting tasks to multiple threads that are available in the thread pool.&lt;/li&gt;&lt;li&gt;Java 8 added parallel sorting functionalities to java.util.Arrays to take advantage of multithread machines&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Arrays;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;class Java8JavaScript{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args ){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int arr[]={1,4,2,8,5};&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; Arrays.parallelSort(arr);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; for(int i:arr){ &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(i); &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;You might like:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/convert-string-to-date-in-java.html" target="_blank"&gt;Format dates in Java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html" target="_blank"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html" target="_blank"&gt;String vs Stringbuffer vs Stringbuilder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/marker-interfaces-in-java.html" target="_blank"&gt;Marker Interfaces&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/varargs-in-java.html" target="_blank"&gt;Var Args in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/jvm-architecture.html" target="_blank"&gt;JVM Architecture&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2015/01/top-8-java-7-features.html" target="_blank"&gt;Java 7 Features&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/6mt6v8gW7FY" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/4977843740399332269/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/8-new-java-8-features.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4977843740399332269" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4977843740399332269" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/6mt6v8gW7FY/8-new-java-8-features.html" title=" 8 New Java 8 Features" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-0xJ98WQyp7M/VOHXKN_pBoI/AAAAAAAAAKk/21oNrLUKOqs/s72-c/java88.jpg" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/8-new-java-8-features.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-8821821418472040799</id><published>2015-02-12T23:45:00.001+05:30</published><updated>2015-02-25T22:11:36.228+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Method and Type of methods</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;Method:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Method is a sub block of a class that contains logic of that class.&lt;/li&gt;&lt;li&gt;logic must be placed inside a method, not directly at class level, if we place logic at class level compiler throws an error.&lt;/li&gt;&lt;li&gt;So class level we are allowed to place variables and methods. &lt;/li&gt;&lt;li&gt;The logical statements such as method calls, calculations and printing related statements must be placed inside method, because these statements are considered as logic. &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a;&lt;/li&gt;&lt;li class="alt"&gt;int b;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;System.out.println("instance of java"); &lt;/b&gt;// compiler throws an error.&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;static int a=10;&lt;/li&gt;&lt;li class="alt"&gt; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;public static void main(String args[]){&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;System.out.println(a); // works fine,prints a value:10&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Method Terminology:&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;1.Method Prototype:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The head portion of the method is called method prototype. &lt;/li&gt;&lt;/ul&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;static int b=10;&lt;/li&gt;&lt;li class="alt"&gt; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;public static void main(String args[]) &lt;/b&gt;// -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;{ &lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(b);&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;2.Method body and logic:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The "{ }" region is called method body, and the statements placed inside method body is called logic.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;{&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp; int a=10,b=20;  // method logic&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp; int c=a+b;&amp;nbsp; // method logic&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp; System.out.println(c);&amp;nbsp; // method logic&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;3.Method parameters and arguments:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The variables declared in method parenthesis "( )" are called parameters.&lt;/li&gt;&lt;li&gt;We can define method with 0 to n number of parameters.&lt;/li&gt;&lt;li&gt;The values passing to those parameters are called arguments.&lt;/li&gt;&lt;li&gt;In method invocation we must pass arguments according to the parameters order and type.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public void add(&lt;b&gt;int a, int b&lt;/b&gt;) // -&amp;gt;method prototype. int a, int b are parameters&lt;/li&gt;&lt;li class="alt"&gt;{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; int c=a+b;&amp;nbsp; // method logic&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(c);&amp;nbsp; // method logic&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;obj.add(&lt;b&gt;1,2&lt;/b&gt;); //method call , here 1, 2 are arguments.&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;4:Method signature: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The combination of method "name + parameters "&amp;nbsp; is called method signature&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public void &lt;b&gt;add(int a, int b)&lt;/b&gt; // -&amp;gt;method prototype. int a, int b are parameters&lt;/li&gt;&lt;li class="alt"&gt;{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; int c=a+b;&amp;nbsp; // method logic&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(c);&amp;nbsp; // method logic&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void&lt;b&gt; main(String args[])&lt;/b&gt; // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;obj.add(1,2); //method call , here 1, 2 are arguments.&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In the above program &lt;b&gt;add(int a, int b) and&amp;nbsp; &lt;/b&gt;&lt;b&gt;main(String args[])&lt;/b&gt; are method signatures.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;5. Method return type: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The keyword that is placed before method name is called method return type.&lt;/li&gt;&lt;li&gt;It tells to compiler and JVM about the type of the value is returned from this method after its execution&lt;/li&gt;&lt;li&gt;If nothing is return by method then we can use "void" keyword which specifies method returns nothing.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public &lt;b&gt;int &lt;/b&gt;add(int a, int b) // -&amp;gt;method prototype. int a, int b are parameters&lt;/li&gt;&lt;li class="alt"&gt;{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; int c=a+b;&amp;nbsp; // method logic&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; return c;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static &lt;b&gt;void &lt;/b&gt;main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;int x= obj.add(1,2); //method call , here 1, 2 are arguments.&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(x); &lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Type of declaration of methods based on return type and arguments:&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;1.Method with out return type&amp;nbsp; and without arguments. &lt;/h4&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public &lt;b&gt;void &lt;/b&gt;add(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a=10;&lt;/li&gt;&lt;li class="alt"&gt;int b=10;&lt;/li&gt;&lt;li class="alt"&gt;int c=a+b;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(c);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;{&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;obj.add(); &lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp; &lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;2.Method with out return type and with arguments.&lt;/h4&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public &lt;b&gt;void &lt;/b&gt;add(&lt;b&gt;int a, int b&lt;/b&gt;){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int c=a+b;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(c);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;{&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;obj.add(1,2); &lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp; &lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;3.Method with return type&amp;nbsp; and without arguments. &lt;/h4&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public &lt;b&gt;int &lt;/b&gt;add(){&lt;/li&gt;&lt;li class="alt"&gt;int a=20;&lt;/li&gt;&lt;li class="alt"&gt;int b=30;&lt;/li&gt;&lt;li class="alt"&gt;int c=a+b;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;return &lt;/b&gt;c;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;{&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;int x=obj.add();&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;System.out.println(x);&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp; &lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;4.Method with return type and with arguments.&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;class sample{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public &lt;b&gt;int &lt;/b&gt;add(&lt;b&gt;int a, int b&lt;/b&gt;){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int c=a+b;&lt;/li&gt;&lt;li class="alt"&gt;return c; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]) // -&amp;gt;method prototype.&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;{&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;sample obj= new sample();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;int x=obj.add(1,2); &lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;System.out.println(x);&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;&lt;/li&gt;&lt;b&gt;&lt;/b&gt;&lt;li class="alt"&gt;&lt;b&gt;&amp;nbsp;}&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Method terminology : main method&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Lets take main method and identify method parts&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-MCzxlOI0ccU/VN3hbQogGzI/AAAAAAAAAKU/fKRVVlVvMeA/s1600/javamethods.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java Methods" border="0" src="http://3.bp.blogspot.com/-MCzxlOI0ccU/VN3hbQogGzI/AAAAAAAAAKU/fKRVVlVvMeA/s1600/javamethods.png" title="" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;1.Method Creation with body:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The process of creating method with body is called method definition.&lt;/li&gt;&lt;li&gt;Technically this method called &lt;b&gt;concrete &lt;/b&gt;method.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;class A{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void add(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;2.Method Creation without body:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Creating a method without body is called&amp;nbsp; "&lt;b&gt;Declaring a method&lt;/b&gt;" or "&lt;b&gt;Method declaration&lt;/b&gt;".&lt;/li&gt;&lt;li&gt;Technically this method called "&lt;b&gt;abstract method&lt;/b&gt;".&lt;/li&gt;&lt;li&gt;In method declaration the modifier "&lt;b&gt;abstract&lt;/b&gt;" is mandatory and also should be terminated with "&lt;b&gt;;&lt;/b&gt;".&lt;/li&gt;&lt;li&gt;Example : public void add();&lt;/li&gt;&lt;li&gt;And only abstract class can have abstract method. (in interface we can use , by default all methods are abstract&amp;nbsp; ) &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;abstract class A{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;abstract&amp;nbsp; public void add();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Static and non static methods:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If a method has static keyword in its definition then that method called static method.&lt;/li&gt;&lt;li&gt;We can call static method directly from main method. &lt;/li&gt;&lt;li&gt;If method does not have static keyword in its definition then it is a non static method.&amp;nbsp;&lt;/li&gt;&lt;li&gt;If we want to call a non static method from main method we need object of that class&lt;/li&gt;&lt;li&gt;if we want to call static method outside the class we can call by using classname.method(); &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;class A{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void show(){&amp;nbsp;&amp;nbsp;&amp;nbsp; // &lt;b&gt;static method&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println("static method");&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void display(){&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;b&gt;non static method&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println("non static method");&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args){&lt;/li&gt;&lt;li class="alt"&gt;show(); // &lt;b&gt;static method call&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;A obj= new A();&lt;/li&gt;&lt;li class="alt"&gt;obj.display(); &lt;b&gt;// non static method call&lt;/b&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/XX7vXbOPltM" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/8821821418472040799/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/methods-and-type-of-methods.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/8821821418472040799" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/8821821418472040799" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/XX7vXbOPltM/methods-and-type-of-methods.html" title="Method and Type of methods" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-MCzxlOI0ccU/VN3hbQogGzI/AAAAAAAAAKU/fKRVVlVvMeA/s72-c/javamethods.png" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/methods-and-type-of-methods.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-4064784390548513292</id><published>2015-02-12T16:11:00.002+05:30</published><updated>2015-02-28T08:59:21.587+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Java Data Types</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;Need of Data Types&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Data Types are used to store data temporarily in computer through a program&lt;/li&gt;&lt;li&gt;The data type will specify the type of data that will be stored into a memory location.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Definition:&amp;nbsp;&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The data type is something which gives information about&lt;/li&gt;&lt;li&gt;&lt;b&gt;Size of the memory location&lt;/b&gt; and &lt;b&gt;range of the data &lt;/b&gt;that can be accommodated inside that location.&lt;/li&gt;&lt;li&gt;Possible legal operations those can be performed on that location.&lt;/li&gt;&lt;li&gt;What type of result come out from an expression when we use these types inside that expression.&lt;/li&gt;&lt;li&gt;Whichever the keyword gives these semantics is treated as "data type".&lt;/li&gt;&lt;li&gt;The java language provides different categories of data types. &lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Different Java Data Types:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In java mainly we have two types of data types.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Primitive data types or Fundamental data types.&lt;/li&gt;&lt;li&gt;Referenced data types or Derived data types.&lt;/li&gt;&lt;/ol&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-66qcRRIWC04/VNx7nuc4nsI/AAAAAAAAAJE/8Ss4VLxePkY/s1600/datatypesinjava.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Data types in java" border="0" src="http://2.bp.blogspot.com/-66qcRRIWC04/VNx7nuc4nsI/AAAAAAAAAJE/8Ss4VLxePkY/s1600/datatypesinjava.png" height="444" title="Data types in java" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;1.Primitives Data types:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The primitive data types are the predefined data types given by the programming language and they are meant for storing a single value.&lt;/li&gt;&lt;li&gt;Based on the type and range of data, primitive types are divided into 8 types.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.Integer category:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This category can be used for storing numbers which can be either positive value&amp;nbsp; or negative value without decimal points.&lt;/li&gt;&lt;li&gt;In this category we have 4 primitive data types whose memory sizes are different.&amp;nbsp;&lt;/li&gt;&lt;li&gt;All the 4 types under this category are used for storing same data. But there ranges are different. The java language is providing 4 types under Integer category. So that the memory is utilized efficiently.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;byte&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li&gt;short&lt;/li&gt;&lt;li&gt;int&lt;/li&gt;&lt;li&gt;long &lt;/li&gt;&lt;/ol&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Default value for all these types is "0".&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-muBSB2bUsWE/VNx-qmEUCuI/AAAAAAAAAJQ/ihnwSbpNxHY/s1600/intdatatypes.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java Data types" border="0" src="http://4.bp.blogspot.com/-muBSB2bUsWE/VNx-qmEUCuI/AAAAAAAAAJQ/ihnwSbpNxHY/s1600/intdatatypes.png" title="" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;&lt;span style="font-family: inherit;"&gt;2.Floating point category:&amp;nbsp;&lt;/span&gt;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;This category can be used for storing numbers which can be either +VE or –VE with decimal point. In the floating point category we have two types whose size is different. The two data types are float and double.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;Both the data types under the floating point category are used for storing same data but there range is different. The java language provide as two data types under floating point category so that memory is utilized efficiently.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;D&lt;/span&gt;efault value of f&lt;span style="font-family: inherit;"&gt;loa&lt;span style="font-family: inherit;"&gt;t is&lt;span style="font-family: inherit;"&gt; 0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;&lt;span style="font-family: inherit;"&gt;Default valu&lt;span style="font-family: inherit;"&gt;e of double is 0.0&lt;/span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;float&lt;/li&gt;&lt;li&gt;double &lt;/li&gt;&lt;/ol&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-M_UohIOW2uI/VNyAjVnj5cI/AAAAAAAAAJc/NQtAs0kA8ng/s1600/floatdatatypes.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java Data types" border="0" src="http://4.bp.blogspot.com/-M_UohIOW2uI/VNyAjVnj5cI/AAAAAAAAAJc/NQtAs0kA8ng/s1600/floatdatatypes.png" title="" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;3.Character category:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This category can be used for storing a single character. A character can be represented by alphabets, a digit and special symbols.&amp;nbsp;&lt;/li&gt;&lt;li&gt;This category contains only one data type an it is char.&lt;/li&gt;&lt;li&gt;Default value of char is "one space" &lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;char &lt;/li&gt;&lt;/ol&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-gbn9A7MCvdQ/VNyBs3qQraI/AAAAAAAAAJk/IAtKYr2qEM4/s1600/chardatatype.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java Data type" border="0" src="http://1.bp.blogspot.com/-gbn9A7MCvdQ/VNyBs3qQraI/AAAAAAAAAJk/IAtKYr2qEM4/s1600/chardatatype.png" title="" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;4.Boolean category:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This category can be used for storing either true or false. Under the Boolean category only one data type an it is Boolean. The size is dependent on JVM to JVM.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-9BvsDw-jrEM/VNyDGQPoWhI/AAAAAAAAAJw/jhxHF4yPl4g/s1600/booleandatatype.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Boolean data type" border="0" src="http://4.bp.blogspot.com/-9BvsDw-jrEM/VNyDGQPoWhI/AAAAAAAAAJw/jhxHF4yPl4g/s1600/booleandatatype.png" title="" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Limitations of primitive data types:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using primitive data types we can not store multiple values in continuous memory locations&lt;/li&gt;&lt;li&gt;Due to this limitation we have to face 2 problems.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;#1:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;For instance if we want to store multiple values, for example 1 to 100 , we must create 100 variables. All those variables created across JVM at different locations as shown below.&lt;/li&gt;&lt;li&gt;Hence it takes more time to retrieve values.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-J5q5t6Xos_I/VNyG5W5UV7I/AAAAAAAAAJ8/YSeEvIcL-_U/s1600/memorylocation.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java data types memory allocation" border="0" src="http://3.bp.blogspot.com/-J5q5t6Xos_I/VNyG5W5UV7I/AAAAAAAAAJ8/YSeEvIcL-_U/s1600/memorylocation.png" title="" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;#2:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Also using variables we can not pass all values to the remote computer with single network call, which increases burden on network and also increase lines of code in program.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Referenced data types:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;To solve above two problems, values must be stored in continuous memory locations with single variable name .&lt;/li&gt;&lt;li&gt;This can be possible using referenced types.&lt;/li&gt;&lt;li&gt;Referenced types are given to store values in continuous memory locations with single variable name to retrieve data in quick time and to pass all values with single network call. &lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2015/01/arrays-in-java.html" target="_blank"&gt;Array&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/class.html" target="_blank"&gt;Class&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/10/abstract-class-and-interfaces.html" target="_blank"&gt;Interface &lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/RkQDi9eAGU8" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/4064784390548513292/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/java-data-types.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4064784390548513292" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4064784390548513292" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/RkQDi9eAGU8/java-data-types.html" title="Java Data Types" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://2.bp.blogspot.com/-66qcRRIWC04/VNx7nuc4nsI/AAAAAAAAAJE/8Ss4VLxePkY/s72-c/datatypesinjava.png" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/java-data-types.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-3885521661309357997</id><published>2015-02-11T20:41:00.000+05:30</published><updated>2015-02-24T12:44:31.498+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Coding Standards and Naming conventions</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Coding Standards(CS) and Naming conventions(NC) are suggestions given by sun(Oracle).&lt;/li&gt;&lt;li&gt;CS and NC help developers to develop projects with more readability and understandability.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Why Coding Standards?&amp;nbsp;&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A program is written once , but read many times&lt;ol&gt;&lt;li&gt;During debugging&lt;/li&gt;&lt;li&gt;When adding to the program&lt;/li&gt;&lt;li&gt;When updating the program&lt;/li&gt;&lt;li&gt;When trying to understand the program &lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Anything that makes a program readable and understandable saves lots of time , even in the shot run.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp; &lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Naming Conventions:&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;1.Naming a class:&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-DqtWLEUGzJY/VOwjs2Xya1I/AAAAAAAAAQo/KNyrHzp8K9w/s1600/condingstande%3Dards.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;/a&gt;&lt;a href="http://4.bp.blogspot.com/-DqtWLEUGzJY/VOwjs2Xya1I/AAAAAAAAAQo/KNyrHzp8K9w/s1600/condingstande%3Dards.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Coding Standards and Naming conventions" border="0" src="http://4.bp.blogspot.com/-DqtWLEUGzJY/VOwjs2Xya1I/AAAAAAAAAQo/KNyrHzp8K9w/s1600/condingstande%3Dards.png" height="320" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp; &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Class name should be "noun", because it represents things&lt;/li&gt;&lt;li&gt;Class name should be in title case , means Every word first letter should be capital letter.&lt;/li&gt;&lt;li&gt;This is also known as UpperCamelCase. &lt;/li&gt;&lt;li&gt;Choose descriptive and simple names.&lt;/li&gt;&lt;li&gt;Try to avoid acronyms and abbreviations.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava&lt;/li&gt;&lt;li class="alt"&gt;public JavaDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;2.Naming a Variable: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Variable name also should be noun, because it represents values.&lt;/li&gt;&lt;li&gt;Variable name should be start with small letter.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Use lowerCamelCase.&lt;/li&gt;&lt;li&gt;Example: firstName, lastName, age.&lt;/li&gt;&lt;li&gt;For final variable all its letters should be capital and words must be connected with "_".&lt;/li&gt;&lt;li&gt;Example:&amp;nbsp; MAX_COUNT, MIN_COUNT.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava&lt;/li&gt;&lt;li class="alt"&gt;public JavaDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;String topicName;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;String post;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int postNumber; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;final static int MIN_WORDS=300;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;3.Naming Method: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Method name should be verb because it represents action.&lt;/li&gt;&lt;li&gt;Use lowerCamelCase for naming methods&lt;/li&gt;&lt;li&gt;Example: setFirstName(), getFirstName(), getLastName().&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava&lt;/li&gt;&lt;li class="alt"&gt;public JavaDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;String topicName;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void setTopicName(String topicName) {&lt;/li&gt;&lt;li class="alt"&gt;this.topicName=topicName;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void getTopicName() {&lt;/li&gt;&lt;li class="alt"&gt;return topicName;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;4.Naming a package: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;All letters should be small&amp;nbsp;&lt;/li&gt;&lt;li&gt;like in java io, util, applet&lt;/li&gt;&lt;li&gt;Example com.instanceofjava&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava&lt;/li&gt;&lt;li class="alt"&gt;public JavaDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If you do not follow all above naming conventions compiler wont any Error or exception.&lt;/li&gt;&lt;li&gt;But naming conventions are&amp;nbsp; useful in project and need to follow.&lt;/li&gt;&lt;li&gt;But we need to follow some identifier rules as follows. &lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Identifiers:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Identifier is the name of the basic programming elements.&lt;/li&gt;&lt;li&gt;class names, methods names , object names and variables names are identifiers&lt;/li&gt;&lt;li&gt;If we define a basic program without a name , compiler throws compile time error.&lt;/li&gt;&lt;li&gt;Compilation Error : &amp;lt;identifier&amp;gt; expected.&lt;/li&gt;&lt;li&gt;if we take a class without name then compile time error will come : Syntax error on token "class", Identifier expected after this token.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava&lt;/li&gt;&lt;li class="alt"&gt;public {&amp;nbsp;&amp;nbsp; //&amp;nbsp; Syntax error on token "class", Identifier expected after this token.&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Rules in defining identifier:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;While defining identifier we must follow bellow rules, else it leads to compile time error. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.Identifier should only contain :&lt;/h4&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Alphabets(a -z and A-Z)&lt;/li&gt;&lt;li&gt;Digits (0-9)&lt;/li&gt;&lt;li&gt;Special Characters ( _ and $)&lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;2.Identifier should not start with a digit: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A digit can be used from second character onwards.&lt;/li&gt;&lt;li&gt;Example :&amp;nbsp;&lt;/li&gt;&lt;li&gt;1strank : throws error&lt;/li&gt;&lt;li&gt;No1Rank : works fine&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;3.Identifier should not contain special characters except "-" and "$":&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Example :&amp;nbsp;&lt;/li&gt;&lt;li&gt;first_name : works fine&lt;/li&gt;&lt;li&gt;first#name : throws error&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;4.Identifier is case sensitive : &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;identifier is case sensitive&lt;/li&gt;&lt;li&gt;For example a and A are different a!=A.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;5.keyword cannot be used as user defined identifier :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;we can not use keywords as our identifiers&lt;/li&gt;&lt;li&gt;For example int class; // Syntax error on token "class", invalid VariableDeclarator.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Note:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;we can use predefined class names as identifiers&lt;/li&gt;&lt;li&gt;example : int String;&lt;/li&gt;&lt;li&gt;There is no limit in identifier length. &lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Java comments:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A description about a basic programming element is called comment.&lt;/li&gt;&lt;li&gt;Comments are meant for developer, to understand purpose. &lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Types of comments:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Java supports 3 types of comments&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Single line comments&amp;nbsp; - //&lt;/li&gt;&lt;li&gt;Multiline comments&amp;nbsp; - /* */&lt;/li&gt;&lt;li&gt;Document comment - /** */ &lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/gasjljhhz2Y" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/3885521661309357997/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/coding-standards-and-naming-conventions.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3885521661309357997" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3885521661309357997" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/gasjljhhz2Y/coding-standards-and-naming-conventions.html" title="Coding Standards and Naming conventions" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://4.bp.blogspot.com/-DqtWLEUGzJY/VOwjs2Xya1I/AAAAAAAAAQo/KNyrHzp8K9w/s72-c/condingstande%3Dards.png" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/coding-standards-and-naming-conventions.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-7808253649819088535</id><published>2015-02-11T18:37:00.001+05:30</published><updated>2015-02-28T09:00:29.709+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Top 10 uses of Java Keywords</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;Keyword:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Keywords are predefined identifiers available directly throughout the JVM.&lt;/li&gt;&lt;li&gt;They have a special meaning inside java source code and outside of comments and strings.&lt;/li&gt;&lt;li&gt;For Example : public, static, void &lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Rules:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Keywords can not be used as user defined identifier by the programmer either for variable or method or class names, because keywords are reserved for their intended use.&lt;/li&gt;&lt;li&gt;All characters in keyword must be used in lower case.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Need of keywords:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Basically keywords are used to communicate with compiler and JVM about the operation we perform in java application.&lt;/li&gt;&lt;li&gt;In java we perform 10 different operations using keywords&lt;/li&gt;&lt;li&gt;They are:&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Creating Java file&lt;/li&gt;&lt;li&gt;Storing data temporary&lt;/li&gt;&lt;li&gt;Creating memory locations&lt;/li&gt;&lt;li&gt;Controlling calculations&lt;/li&gt;&lt;li&gt;Setting accessibility permissions&lt;/li&gt;&lt;li&gt;Modifying default properties&lt;/li&gt;&lt;li&gt;Object representation&lt;/li&gt;&lt;li&gt;Establishing relations between classes&lt;/li&gt;&lt;li&gt;Grouping classes&lt;/li&gt;&lt;li&gt;Handling user mistakes&lt;/li&gt;&lt;/ol&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In java we have 50 keywords to perform all above 10 operations&lt;/li&gt;&lt;li&gt;Among them 47 introduced in java 1.0&lt;/li&gt;&lt;li&gt;In Java 1.2 new keyword "strictfp" was added.&lt;/li&gt;&lt;li&gt;In Java 1.4 new keyword "assert" was added&lt;/li&gt;&lt;li&gt;In Java 5 new keyword "enum" was added&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Among 50 keywords 2 keywords are reserved words they can not be used in java program, because they defined but they are not implemented , those two are,&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;goto&lt;/li&gt;&lt;li&gt;const&lt;/li&gt;&lt;/ol&gt;&lt;div style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;/div&gt;&lt;h3 style="text-align: left;"&gt;1.Java Files&lt;/h3&gt;&lt;div style="text-align: left;"&gt;1.class&lt;br /&gt;2.interface&lt;br /&gt;3.enum&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;2.Data Types&lt;/h3&gt;&lt;div style="text-align: left;"&gt;4.byte&lt;br /&gt;5.short&lt;br /&gt;6.int&lt;br /&gt;7.long&lt;br /&gt;8.float&lt;br /&gt;9.double&lt;br /&gt;10.char&lt;br /&gt;11.boolean&lt;br /&gt;12.void&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;3.Memory Location&lt;/h3&gt;&lt;div style="text-align: left;"&gt;13.static&lt;br /&gt;14.new&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;4.Control Statements&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;1.conditional &lt;/h4&gt;&lt;div style="text-align: left;"&gt;15.if&lt;/div&gt;&lt;div style="text-align: left;"&gt;16.else&lt;/div&gt;&lt;div style="text-align: left;"&gt;17.switch&lt;/div&gt;&lt;div style="text-align: left;"&gt;18.case&lt;/div&gt;&lt;div style="text-align: left;"&gt;19.default&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;2.loop&lt;/h4&gt;&lt;div style="text-align: left;"&gt;20.while&lt;/div&gt;&lt;div style="text-align: left;"&gt;21.do&lt;/div&gt;&lt;div style="text-align: left;"&gt;22.for&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;3.transfer &lt;/h4&gt;&lt;div style="text-align: left;"&gt;23.break&lt;/div&gt;&lt;div style="text-align: left;"&gt;24.continue&lt;/div&gt;&lt;div style="text-align: left;"&gt;25.return&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;5.Accessibility Modifiers&lt;/h3&gt;&lt;div style="text-align: left;"&gt;26.private&lt;/div&gt;&lt;div style="text-align: left;"&gt;27.protected&lt;/div&gt;&lt;div style="text-align: left;"&gt;28.public&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;6.Modifiers &lt;/h3&gt;&lt;div style="text-align: left;"&gt;28.static // used as modifier and class level memory allocation&lt;/div&gt;&lt;div style="text-align: left;"&gt;29.final&lt;/div&gt;&lt;div style="text-align: left;"&gt;30.abstract&lt;/div&gt;&lt;div style="text-align: left;"&gt;31.native&lt;/div&gt;&lt;div style="text-align: left;"&gt;32.transient&lt;/div&gt;&lt;div style="text-align: left;"&gt;33.volatile&lt;/div&gt;&lt;div style="text-align: left;"&gt;34.synchronized&lt;/div&gt;&lt;div style="text-align: left;"&gt;35.strictfp&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;7.Object Representation&lt;/h3&gt;&lt;div style="text-align: left;"&gt;36.this&lt;/div&gt;&lt;div style="text-align: left;"&gt;37.super&lt;/div&gt;&lt;div style="text-align: left;"&gt;38.instanceof&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;8.Inheritance Relationship&lt;/h3&gt;&lt;div style="text-align: left;"&gt;39.extends&lt;/div&gt;&lt;div style="text-align: left;"&gt;40.implements&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;9.Package&lt;/h3&gt;&lt;div style="text-align: left;"&gt;41.package&lt;/div&gt;&lt;div style="text-align: left;"&gt;42.import&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;10.Exception Handling&lt;/h3&gt;&lt;div style="text-align: left;"&gt;43.try&lt;/div&gt;&lt;div style="text-align: left;"&gt;44.catch&lt;/div&gt;&lt;div style="text-align: left;"&gt;45.finally&lt;/div&gt;&lt;div style="text-align: left;"&gt;46.throw&lt;/div&gt;&lt;div style="text-align: left;"&gt;47.throws&lt;/div&gt;&lt;div style="text-align: left;"&gt;48.assert&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;11.Unused keywords&lt;/h3&gt;&lt;div style="text-align: left;"&gt;49.const&lt;/div&gt;&lt;div style="text-align: left;"&gt;50.goto &lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Default literals:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;1.referenced literal&lt;/div&gt;&lt;div style="text-align: left;"&gt;&amp;nbsp; -&amp;gt;null&lt;/div&gt;&lt;div style="text-align: left;"&gt;2.boolean literals&lt;/div&gt;&lt;div style="text-align: left;"&gt;-&amp;gt;true&lt;/div&gt;&lt;div style="text-align: left;"&gt;-&amp;gt;false &lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/5Vs1C8gs82Y" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/7808253649819088535/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/top-10-uses-of-java-keywords.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/7808253649819088535" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/7808253649819088535" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/5Vs1C8gs82Y/top-10-uses-of-java-keywords.html" title="Top 10 uses of Java Keywords" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/top-10-uses-of-java-keywords.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-2085820486192181081</id><published>2015-02-11T15:45:00.001+05:30</published><updated>2015-02-26T16:29:20.841+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Reading data from file using FIleInputStream </title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;1.Reading the data from a file:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;FileInputStream class is used to read data from a file.&lt;/li&gt;&lt;li&gt;It is two step process.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Create&amp;nbsp; FileInputStream class object by using its available constructors.&lt;/li&gt;&lt;li&gt;Then call read() method on this object till control reach end of file. &lt;/li&gt;&lt;/ol&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Means read() method must be called in loop, because it returns only one byte at a time .&lt;/li&gt;&lt;li&gt;Hence it must be called in loop for each byte available in the file till it returns "-1".&lt;/li&gt;&lt;li&gt;It returns&amp;nbsp; -1 if control reached end of the file.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;FileInputStream&lt;/b&gt; class has below &lt;b&gt;constructors &lt;/b&gt;to create its object:&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;public FileInputStrean(String name) throws FileNotFoundException&lt;/li&gt;&lt;li&gt;&amp;nbsp;public FileInputStream(File file)&amp;nbsp; throws FileNotFoundException&lt;/li&gt;&lt;li&gt;&amp;nbsp;public FileInputStream(FileDescriptor fd)&lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;Rule:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;To Create FileInputStream class object the file must be with the passed argument name . else this constructor throws java.io.FileNotFoundException. &lt;/li&gt;&lt;li&gt;FileInputStream&amp;nbsp; class constructor throws FileNotFoundException in below situations.&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If the file is not existed with the passed name.&lt;/li&gt;&lt;li&gt;Passed file name is a directory rather than is a regular file.&lt;/li&gt;&lt;li&gt;If file does not have reading permissions.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;Java Program to read data from a file:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Create a file with name &lt;b&gt;test.txt&lt;/b&gt;. with text "hello world" this is for example you can write any text.&lt;/li&gt;&lt;li&gt;Creating stream object connecting to test.txt file.&lt;br /&gt;FileInputStream fis= new FileInputStream("&lt;b&gt;test.txt&lt;/b&gt;");&lt;/li&gt;&lt;li&gt;Reading all bytes from the file till control reaches end of file.&lt;br /&gt;int i=fis.read();&lt;/li&gt;&lt;li&gt;Printing returned character.&lt;br /&gt;System.out.println(i);&lt;/li&gt;&lt;/ol&gt;&lt;h3 style="text-align: left;"&gt;Program #1:&amp;nbsp;&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.FileInputStream;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.FileNotFoundException;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.IOException;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class FISDemo {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) throws FileNotFoundException, IOException&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FileInputStream fis= new FileInputStream("E:\\test.txt");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int i;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while((i=fis.read())!=-1){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println((char)i);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Output:&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;h&lt;/li&gt;&lt;li class="alt"&gt;e&lt;/li&gt;&lt;li class="alt"&gt;l&lt;/li&gt;&lt;li class="alt"&gt;l&lt;/li&gt;&lt;li class="alt"&gt;o&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;w &lt;/li&gt;&lt;li class="alt"&gt;o&lt;/li&gt;&lt;li class="alt"&gt;r&lt;/li&gt;&lt;li class="alt"&gt;l&lt;/li&gt;&lt;li class="alt"&gt;d&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Program #2: Using read() method&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.FileInputStream;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.FileNotFoundException;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.IOException;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class FISDemo {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) throws FileNotFoundException, IOException&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FileInputStream fis= new FileInputStream("E:\\test.txt");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; byte[] b=new byte[fin.available()];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Read data into the array&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fin.read(b);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; b.length; i++) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println((char)b[i]);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Output:&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;h&lt;/li&gt;&lt;li class="alt"&gt;e&lt;/li&gt;&lt;li class="alt"&gt;l&lt;/li&gt;&lt;li class="alt"&gt;l&lt;/li&gt;&lt;li class="alt"&gt;o&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;w &lt;/li&gt;&lt;li class="alt"&gt;o&lt;/li&gt;&lt;li class="alt"&gt;r&lt;/li&gt;&lt;li class="alt"&gt;l&lt;/li&gt;&lt;li class="alt"&gt;d&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Program #3: Using read(destination, start-index, last-index) method &lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.FileInputStream;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.FileNotFoundException;&lt;/li&gt;&lt;li class="alt"&gt;import java.io.IOException;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class FISDemo {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) throws FileNotFoundException, IOException&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FileInputStream fis= new FileInputStream("E:\\test.txt");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; byte b1[]=new byte[fin.available()];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; fin.read(b1,0,b1.length);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(int i=0;i&amp;lt;b1.length;i++)&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print((char)b1[i]);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Output:&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;hello world&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/VuyJDe1KgpY" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/2085820486192181081/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/reading-data-from-file-fileinputstream.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/2085820486192181081" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/2085820486192181081" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/VuyJDe1KgpY/reading-data-from-file-fileinputstream.html" title="Reading data from file using FIleInputStream " /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/reading-data-from-file-fileinputstream.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-8383685936002105574</id><published>2015-02-11T09:51:00.004+05:30</published><updated>2015-02-12T13:09:12.263+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Core java Interview Questions" /><title type="text">Create Thread without extending Thread and implementing Runnable</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;Using AnonymousThread:&lt;/h3&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class AnonymousThread&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args)&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; new Thread(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i&amp;nbsp; &amp;lt;=10; i++) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("run"+i);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; }.start();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i&amp;nbsp; &amp;lt;=10; i++) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("main:"+i);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; } &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Output:&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;main:0&lt;/li&gt;&lt;li class="alt"&gt;run:0&lt;/li&gt;&lt;li class="alt"&gt;main:1&lt;/li&gt;&lt;li class="alt"&gt;run:1&lt;/li&gt;&lt;li class="alt"&gt;main:2&lt;/li&gt;&lt;li class="alt"&gt;run:2&lt;/li&gt;&lt;li class="alt"&gt;main:3&lt;/li&gt;&lt;li class="alt"&gt;run:3&lt;/li&gt;&lt;li class="alt"&gt;main:4&lt;/li&gt;&lt;li class="alt"&gt;run:4&lt;/li&gt;&lt;li class="alt"&gt;main:5&lt;/li&gt;&lt;li class="alt"&gt;run:5&lt;/li&gt;&lt;li class="alt"&gt;main:6&lt;/li&gt;&lt;li class="alt"&gt;run:6&lt;/li&gt;&lt;li class="alt"&gt;main:7&lt;/li&gt;&lt;li class="alt"&gt;run:7&lt;/li&gt;&lt;li class="alt"&gt;main:8&lt;/li&gt;&lt;li class="alt"&gt;run:8&lt;/li&gt;&lt;li class="alt"&gt;main:9&lt;/li&gt;&lt;li class="alt"&gt;run:9&lt;/li&gt;&lt;li class="alt"&gt;main:10&lt;/li&gt;&lt;li class="alt"&gt;run:10&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Using AnonymousRunnable:&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class AnonymousRunnable&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String[] args)&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; new Thread(new Runnable(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i&amp;nbsp; &amp;lt;=10; i++) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("run"+i);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;).start();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i&amp;nbsp; &amp;lt;=10; i++) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("main:"+i);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; } &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;Output:&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;&lt;/h4&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;main:0&lt;/li&gt;&lt;li class="alt"&gt;run0&lt;/li&gt;&lt;li class="alt"&gt;main:1&lt;/li&gt;&lt;li class="alt"&gt;run1&lt;/li&gt;&lt;li class="alt"&gt;main:2&lt;/li&gt;&lt;li class="alt"&gt;run2&lt;/li&gt;&lt;li class="alt"&gt;main:3&lt;/li&gt;&lt;li class="alt"&gt;run3&lt;/li&gt;&lt;li class="alt"&gt;main:4&lt;/li&gt;&lt;li class="alt"&gt;run4&lt;/li&gt;&lt;li class="alt"&gt;main:5&lt;/li&gt;&lt;li class="alt"&gt;run5&lt;/li&gt;&lt;li class="alt"&gt;main:6&lt;/li&gt;&lt;li class="alt"&gt;run6&lt;/li&gt;&lt;li class="alt"&gt;main:7&lt;/li&gt;&lt;li class="alt"&gt;run7&lt;/li&gt;&lt;li class="alt"&gt;main:8&lt;/li&gt;&lt;li class="alt"&gt;run8&lt;/li&gt;&lt;li class="alt"&gt;main:9&lt;/li&gt;&lt;li class="alt"&gt;run9&lt;/li&gt;&lt;li class="alt"&gt;main:10&lt;/li&gt;&lt;li class="alt"&gt;run10&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/Es8D2QsRuOA" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/8383685936002105574/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/02/thread-without-extending-thread-runnable.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/8383685936002105574" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/8383685936002105574" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/Es8D2QsRuOA/thread-without-extending-thread-runnable.html" title="Create Thread without extending Thread and implementing Runnable" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/02/thread-without-extending-thread-runnable.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-5829619350285089374</id><published>2015-01-30T12:52:00.002+05:30</published><updated>2015-02-28T09:01:08.327+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Top 8 Java 7 features</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;java 7 features with examples&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-IKRgRlPyHyk/VOwgZJkp62I/AAAAAAAAAQc/nfSXUZVxt94/s1600/java%2B7.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="Java 7 features" border="0" src="http://1.bp.blogspot.com/-IKRgRlPyHyk/VOwgZJkp62I/AAAAAAAAAQc/nfSXUZVxt94/s1600/java%2B7.png" height="320" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;String in switch statements&lt;/li&gt;&lt;li&gt;Type inference for generic instance creation.&lt;/li&gt;&lt;li&gt;The try with resources Statement.&lt;/li&gt;&lt;li&gt;Multiple exception handling System.&lt;/li&gt;&lt;li&gt;Bracket notation for collections.&lt;/li&gt;&lt;li&gt;Underscored in Numeric literals&lt;/li&gt;&lt;li&gt;Binary Literals with Prefix 0b&lt;/li&gt;&lt;li&gt;java.nio.file package&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;1.String in switch statements:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Did you know previous to java 7 you could do a switch on &lt;br /&gt;&lt;ol&gt;&lt;li&gt;char&lt;/li&gt;&lt;li&gt;byte&lt;/li&gt;&lt;li&gt;int&lt;/li&gt;&lt;li&gt;Character&lt;/li&gt;&lt;li&gt;Byte&lt;/li&gt;&lt;li&gt;Integer&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;Java 7 adds String making the switch instruction much friendlier to String inputs&lt;/li&gt;&lt;li&gt;The alternative before was to do with if&amp;nbsp; else statements paired with a bunch of String equal() calls .&lt;/li&gt;&lt;li&gt;The result much cleaner and compact code.&lt;/li&gt;&lt;li&gt;Here the java 7 switch with string&amp;nbsp;&lt;/li&gt;&lt;li&gt;One of the java 7 new feature strings in switch&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&amp;nbsp;Example program on java 7 new feature string in switch:&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Demo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;String color="green";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;switch(color){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "white": System.out.println("white");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "green": System.out.println("green");&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; break;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "red": System.out.println("red");&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "yellow": System.out.println("yellow");&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "blue": System.out.println("blue");&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; break;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "pink": System.out.println("pink");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; case "violet": System.out.println("violet");&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; break;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; default: System.out.println("invalid color")&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('POSTjava7')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="POSTjava7" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;green&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;2.Type inference for generic instance creation:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Previously when we are using generics you had to specify the type twice, in the declaration and the constructor &lt;/li&gt;&lt;li&gt;Before java 7 to create arraylist of string type&lt;/li&gt;&lt;li&gt;List&amp;lt;String&amp;gt; str= new ArrayList&amp;lt;String&amp;gt;();&lt;/li&gt;&lt;li&gt;In java 7 you just use the diamond &amp;lt;&amp;gt; operator without the type.&lt;/li&gt;&lt;li&gt;List&amp;lt;String&amp;gt; str= new ArrayList&amp;lt;&amp;gt;();&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7feture{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;List&amp;lt;String&amp;gt; lst= new ArrayList&amp;lt;&amp;gt;();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; lst.add("ABC");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; lst.add("XYZ");&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;3.The try with resources Statement:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The new try statement allows opening up a "resource" in atry block and automatically closing the resource when the block is done.&lt;/li&gt;&lt;li&gt;For example in the below piece of code we opened a file print line by line to stdout.&lt;/li&gt;&lt;li&gt;But pay close attention to the finally block.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7feture{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;BufferedReader in=null;&lt;/li&gt;&lt;li class="alt"&gt;try{&lt;/li&gt;&lt;li class="alt"&gt;in= new BufferedReader(new filereader("test.txt")); &lt;/li&gt;&lt;li class="alt"&gt;String line=null;&lt;/li&gt;&lt;li class="alt"&gt;while((line=in.readLine())!=null)){&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(line);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}catch(IOException e){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;e.printStackTrace(); &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;finally{&lt;/li&gt;&lt;li class="alt"&gt;try{&lt;/li&gt;&lt;li class="alt"&gt;if(in!=null)&lt;/li&gt;&lt;li class="alt"&gt;in.close();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;catch(IOException e){&lt;/li&gt;&lt;li class="alt"&gt;e.printStackTrace(); &lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;when using a resource that has to be closed , a finally block is needed to make the clean up code is executed eve if there are exceptions thrown back.&lt;/li&gt;&lt;li&gt;The new try catch with resources allows us to automatically close these resources in a more compact set of code.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7feture{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;try(&lt;/li&gt;&lt;li class="alt"&gt;BufferedReader&amp;nbsp; in= new BufferedReader(new filereader("test.txt")) &lt;/li&gt;&lt;li class="alt"&gt;)&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;String line=null;&lt;/li&gt;&lt;li class="alt"&gt;while((line=in.readLine())!=null)){&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(line);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}catch(IOException e){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;e.printStackTrace(); &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;4.Multiple exception handling System:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Tired of repetitive error handling code ?&lt;/li&gt;&lt;li&gt;APIs like java.io and java.lang.reflect?&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Demo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;try{&lt;/li&gt;&lt;li class="alt"&gt;Class a= Class.forName("wrongclassname"); &lt;/li&gt;&lt;li class="alt"&gt;Object instance=a.newInstance();&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;catch( ClassNotFoundException e){&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Failed to create instance") ;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;catch( IllegalAccessException e){&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Failed to create instance") ; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;catch( InstanctiationException e){&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Failed to create instance") ; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;When the exception handling is basically the same, the improved catch operator now supports&lt;br /&gt;multiple exceptions in a single statement separated by "|".&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7feture{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;try{&lt;/li&gt;&lt;li class="alt"&gt;Class a= Class.forName("wrongclassname"); &lt;/li&gt;&lt;li class="alt"&gt;Object instance=a.newInstance();&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;catch( ClassNotFoundException&amp;nbsp; | IllegalAccessException&amp;nbsp; | InstanctiationException ex  ){&lt;/li&gt;&lt;li class="alt"&gt;System.out.println("Failed to create instance") ;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;5.Bracket notation for collections:&lt;/h4&gt;&lt;div style="text-align: left;"&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Demo5{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;List&amp;lt;String&amp;gt; lststr = new ArrayList&amp;lt;String&amp;gt;();&lt;/li&gt;&lt;li class="alt"&gt;lststr .add("instanceof");&lt;/li&gt;&lt;li class="alt"&gt;lststr .add("java!"); &lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&amp;nbsp;&lt;/h4&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7FeatureTutorial{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;List&amp;lt;Integer&amp;gt; intlst = [1, 2, 3, 4];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Set&amp;lt;String&amp;gt; str = {"abc", "xyz", "dcv"};&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Map&amp;lt;String, Integer&amp;gt; map= { "number" : 42 };&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;6.Underscored in Numeric literals:&lt;/h4&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7FeatureTutorial{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int value = 1_000_000;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;long Atmcardnumber =&amp;nbsp; 0123_4567_8901_2345L; //16 digit number&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;long ssn = 777_99_8888L;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;double pi = 3.1415_9265;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;float&amp;nbsp; pifloat = 3.14_15_92_65f;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;7.Binary Literals with Prefix 0b:&lt;/h4&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Java7FeatureTutorial{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;// An 8-bit 'byte' value:&lt;/li&gt;&lt;li class="alt"&gt;byte byte = 0b00100001;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;// A 16-bit 'short' value:&lt;/li&gt;&lt;li class="alt"&gt;short short = 0b0010001010001010;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;// Some 32-bit 'int' values:&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a = 0b10100001010001011010000101000101;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int b= 0b101;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int c = 0B101; // The B can be upper or lower case.&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;8.java.nio.file package:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;java 7 introduced java.nio and sub package java&lt;/li&gt;&lt;li&gt;&lt;b&gt;java.nio.file&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;java.nio.file.attribute&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Support for input output file. and to access default file system.&lt;b&gt;&amp;nbsp;&amp;nbsp;&lt;/b&gt; &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;You might like:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/io-streams.html" target="_blank"&gt;IO Streams in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html" target="_blank"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html" target="_blank"&gt;String vs Stringbuffer vs Stringbuilder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2014/12/marker-interfaces-in-java.html" target="_blank"&gt;Marker Interfaces&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/varargs-in-java.html" target="_blank"&gt;Var Args in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/jvm-architecture.html" target="_blank"&gt;JVM Architecture &lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/73-ZokvWwGU" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/5829619350285089374/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/top-8-java-7-features.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/5829619350285089374" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/5829619350285089374" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/73-ZokvWwGU/top-8-java-7-features.html" title="Top 8 Java 7 features" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-IKRgRlPyHyk/VOwgZJkp62I/AAAAAAAAAQc/nfSXUZVxt94/s72-c/java%2B7.png" height="72" width="72" /><thr:total>0</thr:total><georss:featurename>Hyderabad, Telangana, India</georss:featurename><georss:point>17.385044 78.486671</georss:point><georss:box>16.9002155 77.841224 17.8698725 79.132118</georss:box><feedburner:origLink>http://www.instanceofjava.com/2015/01/top-8-java-7-features.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-7590865411743336523</id><published>2015-01-28T23:55:00.001+05:30</published><updated>2015-02-25T22:11:50.635+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">PrintStream Class</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This class is filer output Stream&amp;nbsp; class, It adds functionality to another output stream , namely the ability to print representation of various data values conveniently.&lt;/li&gt;&lt;li&gt;It is the most convenient class in writing data to another output stream, because of below three reasons.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-tbNEuR52-PM/VMnQJMqJGWI/AAAAAAAAAIQ/eg8XBFATbtc/s1600/Printstream.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="PrintStream class in java" border="0" src="http://1.bp.blogspot.com/-tbNEuR52-PM/VMnQJMqJGWI/AAAAAAAAAIQ/eg8XBFATbtc/s1600/Printstream.png" height="324" title="" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Unlike other output stream's write() method , write() method of this class never throws an IOException.&lt;/li&gt;&lt;li&gt;Calling flush() method is optional, it is called automatically.&lt;/li&gt;&lt;li&gt;In addition to default write() methods&amp;nbsp; it is defined new methods called print() and println(). These two methods are overloaded to print all types of java data type values including object. Below are the overloaded print() and println() methods list.&lt;/li&gt;&lt;/ol&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;public void print(int x);&lt;/li&gt;&lt;li&gt;public void print(long x);&lt;/li&gt;&lt;li&gt;public void print(float x);&lt;/li&gt;&lt;li&gt;public void print(double x);&lt;/li&gt;&lt;li&gt;public void print(char x);&lt;/li&gt;&lt;li&gt;public void print(boolean x); &lt;/li&gt;&lt;li&gt;public void print(char[] x);&lt;/li&gt;&lt;li&gt;public void print(String x);&amp;nbsp;&lt;/li&gt;&lt;li&gt;public void print(Object x);&amp;nbsp; &lt;/li&gt;&lt;/ol&gt;&lt;ol&gt;&lt;li&gt;public void println(int x);&lt;/li&gt;&lt;li&gt;public void println(long x);&lt;/li&gt;&lt;li&gt;public void println(float x);&lt;/li&gt;&lt;li&gt;public void println(double x);&lt;/li&gt;&lt;li&gt;public void println(char x);&lt;/li&gt;&lt;li&gt;public void println(boolean x); &lt;/li&gt;&lt;li&gt;public void println(char[] x);&lt;/li&gt;&lt;li&gt;public void println(String x);&amp;nbsp;&lt;/li&gt;&lt;li&gt;public void println(Object x);&amp;nbsp; &lt;/li&gt;&lt;/ol&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;PrintStream class object is created in System class using a static variable called out.&lt;/li&gt;&lt;li&gt;So we can access above methods from our class using System class's PrintStream object as shown below.&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/1explain-systemoutprintln.html" target="_blank"&gt;System.out.print("abc");&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/1explain-systemoutprintln.html" target="_blank"&gt;System.out.println("abc");&lt;/a&gt;&lt;/li&gt;&lt;li&gt;System is predefined class in java.lang package.&lt;/li&gt;&lt;li&gt;out is static referenced variable of type PrintStream class. It is created in System class to hold PrintStream class object.&lt;/li&gt;&lt;li&gt;println() and print() methods are non static methods defined in PrintStream class to print data.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Difference between print() and println(): &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;print() method places cursor in the same line after printing data, so that next coming output will be printed in the same line.&lt;/li&gt;&lt;li&gt;But println() method places cursor in the next line after printing data so that next coming output will be printed&amp;nbsp; in the next line.&lt;/li&gt;&lt;/ul&gt;What is the output of below program?&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class PrintDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println("A");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println("B");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println("C"); &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('POSTPT1')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="POSTPT1" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;AB&lt;/li&gt;&lt;li class="alt"&gt;C&lt;/li&gt;&lt;li class="alt"&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;Rule #1: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We can not call print method without passing arguments because we do not have no argument print method so it leads to Compilation Error.&lt;/li&gt;&lt;li&gt;But we can call println() method without passing arguments because we have no argument println() method , it prints new line.&lt;/li&gt;&lt;/ul&gt;What is the output of below program?&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class PrintDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println("A");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println("B");&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print();&amp;nbsp;&amp;nbsp; // Compilation Error&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("B");&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;Rule #2:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;We cannot call print() or println() methods by passing null literal directly.&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/what-happens-when-systemoutprintlnnull.html" target="_blank"&gt;System.out.println(null);&lt;/a&gt;&lt;/li&gt;&lt;li&gt;It leads to Compilation Error : Ambiguous error.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Compilation Error -This is because you can pass an Object or a  String or char[]. Since null can fit in both, the compiler doesn't know  which method to use, leading to compile error.&lt;/li&gt;&lt;li&gt;Method Overloading:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1.public void prinltln(String str) { }&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2.public void prinltln(char[] ch){ }&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3.public void prinltln(Object ch){ }&lt;/li&gt;&lt;/ul&gt;What is the output of below program?&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class PrintDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println(null); // Compilation Error&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.print(null); // Compilation Error&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;Difference between println(Object) and writeObject(Object) methods? &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;writeObject(Object) method serializes the given object and sends its state to underlying output stream.&amp;nbsp;&lt;/li&gt;&lt;li&gt;where as println(Object) method does not perform serialization instead it prints the passed object information that is returned by the toString() method.&lt;/li&gt;&lt;li&gt;It means println(Object) method internally calls toString() on given object to print the given object information .&lt;/li&gt;&lt;li&gt;If toString() method is not defined in the passed object's class it will call Object class toString() method which is originally defined.&lt;/li&gt;&lt;li&gt;toString() method in object class returns current object classname@hashcode in hexadecimal string format.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;What is the output of below program?&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;toString() method is not overridden in Example class&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Example{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; int x, int y;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Example obj = new Example();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  obj.x=1;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; obj.y=2; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println(obj);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('POSTPT2')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="POSTPT2" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;com.instanceofjava.Example@53601a4f&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;What is the output of below program?&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;toString() method is not overridden in Example class&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Example{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; int x, int y;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public String toString(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; return "x="+x+" "+"y="+y;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Example obj = new Example();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; obj.x=1;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp; obj.y=2; &lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println(obj);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('POSTPT3')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="POSTPT3" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;x=1 y=2&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;You might like:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/io-streams.html" target="_blank"&gt;IO Streams in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html" target="_blank"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html" target="_blank"&gt;String vs Stringbuffer vs Stringbuilder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2014/12/marker-interfaces-in-java.html" target="_blank"&gt;Marker Interfaces&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/varargs-in-java.html" target="_blank"&gt;Var Args in java&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/Gk6cqNCuDw0" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/7590865411743336523/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/printstream-class.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/7590865411743336523" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/7590865411743336523" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/Gk6cqNCuDw0/printstream-class.html" title="PrintStream Class" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-tbNEuR52-PM/VMnQJMqJGWI/AAAAAAAAAIQ/eg8XBFATbtc/s72-c/Printstream.png" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/printstream-class.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-6080471382152557133</id><published>2015-01-28T15:36:00.001+05:30</published><updated>2015-02-01T12:21:22.860+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">InputStream vs OutputStream</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;For each type of source and destination in java.io package oracle given a separate class.&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-Sc9ReivvalE/VMjBs8CiU7I/AAAAAAAAAIA/MsrSvCUlYYM/s1600/inputStreamvsoutputstream.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Inputstream vs OutputStream" border="0" src="http://3.bp.blogspot.com/-Sc9ReivvalE/VMjBs8CiU7I/AAAAAAAAAIA/MsrSvCUlYYM/s1600/inputStreamvsoutputstream.jpg" height="563" title="Inputstream vs OutputStream" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;InputStream Class:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ByteArrayInputStream&lt;/li&gt;&lt;li&gt;FileInputStream&lt;/li&gt;&lt;li&gt;FilterInputStream&lt;ul&gt;&lt;li&gt;BufferedInputStream&lt;/li&gt;&lt;li&gt;DataInputStream&lt;/li&gt;&lt;li&gt;LineNumberInputStream&lt;/li&gt;&lt;li&gt;PushbackInputStream&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ObjectInputStream&lt;/li&gt;&lt;li&gt;PipeInputStream&lt;/li&gt;&lt;li&gt;SequenceInputStream&lt;/li&gt;&lt;li&gt;StringBufferInputStream&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;IputStream Class Methods: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Since InputStream class is the super class for all input stream classes. It has below methods with general implementation for all sub classes.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.public int available() throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Checking available bytes to read.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;2.public abstract int read() throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reading byte-by-byte.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;3.public int read(byte[] b) throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reading all&amp;nbsp; bytes.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;4.public int read(byte[] b, int off, int length) throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reading selected range of bytes.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;5.public boolean markSupported() :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Checking is this Stream supports marking. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;6.public void mark(int readLimit) :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Marking current position of stream.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;7.public void reset() throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Placing the control at marked place. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;8.public long skip(long n) throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Skip reading given range of bytes. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;9.public void close() throws IOException : &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Closing the stream.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt; &lt;/h4&gt;&lt;h3 style="text-align: left;"&gt;OutputStream Class:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ByteArrayOutputStream&lt;/li&gt;&lt;li&gt;FileOutputStream&lt;/li&gt;&lt;li&gt;FilterOutputStream&lt;ul&gt;&lt;li&gt;BufferedOutputStream&lt;/li&gt;&lt;li&gt;DataOutputStream&lt;/li&gt;&lt;li&gt;PrintStream&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;ObjectOutputStream&lt;/li&gt;&lt;li&gt;PipeOutputStream &lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;OutputStream class methods: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Since OutputStream is the super class of all binary output stream classes it has below method with general implementation for all sub classes.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.public abstract void write(int i)throws IOException:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Writing one by at time to an output stream.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;2.public void write(byte[] b) throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Writing stream of bytes to an output stream. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;3.public void write(byte []b , int off, int length) throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Writing range of stream of bytes to an output stream. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;4.public void flush() throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Flush all bytes to destination from output Stream.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;5.public void close() throws IOException :&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Close output stream.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;FileInputStream and FileOutputStream: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;These classes are used to read and write data as byte from File.&lt;/li&gt;&lt;li&gt;Basically these two streams are used as basic data source and destination for other streams.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;DataInputStream and DataOutputStream: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;These two classes are used to read and write data as primitive data.&lt;/li&gt;&lt;li&gt;Basically these two streams are used to add capability to another input stream and output stream to read and write data as primitive types.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;ObjectInputStream and ObjectOutputStream: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;These classes are used to read and write data as object.&lt;/li&gt;&lt;li&gt;Basically these two streams perform object&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2014/10/serialization.html" target="_blank"&gt;serialization and deserialization.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;BufferedInputStream and BufferedOutputStream:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;These two classes are used to read and write data as buffers.&lt;/li&gt;&lt;li&gt;Basically these two streams are used to improve reading and writing performance of other streams.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;SequenceInputStream:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This class is used to read data from multiple InputStreams Sequentially.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&amp;nbsp;PrintStream:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2015/01/printstream-class.html" target="_blank"&gt;PrintStream&lt;/a&gt; class is filter output stream class .&lt;/li&gt;&lt;li&gt;Its adds functionality to another OutputStream, namely the ability to print representations of various data values conveniently.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Basic steps to perform IO Operations:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Create stream class object based on source and destination.&lt;/li&gt;&lt;li&gt;Call read() method to read data from the source.&lt;/li&gt;&lt;li&gt;Call write() method to write data to the destination.&lt;/li&gt;&lt;/ul&gt;For instance , to perform IO Operations on files we must create&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;FileInputStream&lt;/li&gt;&lt;li&gt;FileOutputStream or&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;FileReader&lt;/li&gt;&lt;li&gt;FileWriter&amp;nbsp; Streams class objects.&lt;/li&gt;&lt;/ul&gt;- &lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div&gt;You might like:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/io-streams.html" target="_blank"&gt;IO Streams in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html" target="_blank"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html" target="_blank"&gt;String vs Stringbuffer vs Stringbuilder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2014/12/marker-interfaces-in-java.html" target="_blank"&gt;Marker Interfaces&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/varargs-in-java.html" target="_blank"&gt;Var Args in java&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/xOpK0rEiTUk" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/6080471382152557133/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/inputstream-vs-outputstream.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/6080471382152557133" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/6080471382152557133" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/xOpK0rEiTUk/inputstream-vs-outputstream.html" title="InputStream vs OutputStream" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://3.bp.blogspot.com/-Sc9ReivvalE/VMjBs8CiU7I/AAAAAAAAAIA/MsrSvCUlYYM/s72-c/inputStreamvsoutputstream.jpg" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/inputstream-vs-outputstream.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-3981682664976262562</id><published>2015-01-24T21:21:00.004+05:30</published><updated>2015-02-09T15:20:27.177+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java Programs" /><title type="text">Multiply two matrices</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Scanner;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;class Multiply2Matrices{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; public static void main(String args[])&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int m, n, p, q, sum = 0, c, d, k;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Scanner in = new Scanner(System.in);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Enter the number of rows and columns of first matrix");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; m = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; n = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int first[][] = new int[m][n];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Enter the elements of first matrix");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; m ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; n ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; first[c][d] = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Enter the number of rows and columns of second matrix");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; p = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; q = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( n != p )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Matrices with entered orders can't be multiplied with each other.");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int second[][] = new int[p][q];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int multiply[][] = new int[m][q];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Enter the elements of second matrix");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; p ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; q ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; second[c][d] = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; m ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; q ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( k = 0 ; k &amp;lt; p ; k++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sum = sum + first[c][k]*second[k][d];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; multiply[c][d] = sum;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sum = 0;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Multiplication of entered matrices:-");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; m ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; q ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print(multiply[c][d]+"\t");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print("\n");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;}&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;OutPut:&lt;/h3&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;Enter the number of rows and columns of first matrix&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;2 2&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Enter the elements of first matrix&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;2 2&lt;/li&gt;&lt;li class="alt"&gt;2 3&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Enter the number of rows and columns of second matrix&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;2 2&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Enter the elements of second matrix&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;1 1&lt;/li&gt;&lt;li class="alt"&gt;1 1&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Multiplication of entered matrices:-&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;4&amp;nbsp;&amp;nbsp; &amp;nbsp;4&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;5&amp;nbsp;&amp;nbsp; &amp;nbsp;5&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/ajKBDJeCsIQ" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/3981682664976262562/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/multiply-two-matrices.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3981682664976262562" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3981682664976262562" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/ajKBDJeCsIQ/multiply-two-matrices.html" title="Multiply two matrices" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/multiply-two-matrices.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-1363474640034918765</id><published>2015-01-24T20:48:00.000+05:30</published><updated>2015-01-28T17:37:00.279+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java Programs" /><title type="text">add two matrices</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Scanner;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;class Add2Matrix&lt;/li&gt;&lt;li class="alt"&gt;{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; public static void main(String args[])&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int rows, cols, c, d;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Scanner in = new Scanner(System.in);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Please Enter number of rows and columns");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rows = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cols&amp;nbsp; = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int first[][] = new int[rows][cols];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int second[][] = new int[rows][cols];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int sum[][] = new int[rows][cols];&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Please Enter elements of first matrix");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (&amp;nbsp; c = 0 ; c &amp;lt; rows ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; cols ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; first[c][d] = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Please Enter elements of second matrix");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; rows ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; cols ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; second[c][d] = in.nextInt();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; rows ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; cols ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sum[c][d] = first[c][d] + second[c][d];&amp;nbsp; //replace '+' with '-' to subtract matrices&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Sum of entered matrices:-");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( c = 0 ; c &amp;lt; rows ; c++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for ( d = 0 ; d &amp;lt; cols ; d++ )&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print(sum[c][d]+"\t");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Output:&lt;/h3&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;Please Enter number of rows and columns&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;3&lt;/li&gt;&lt;li class="alt"&gt;3&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Please Enter elements of first matrix&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;1 1 1&lt;/li&gt;&lt;li class="alt"&gt;1 1 1&lt;/li&gt;&lt;li class="alt"&gt;1 1 1&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Please Enter elements of second matrix&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;2 2 2&lt;/li&gt;&lt;li class="alt"&gt;2 2 2&lt;/li&gt;&lt;li class="alt"&gt;2 2 2&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;Sum of entered matrices:-&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;3&amp;nbsp;&amp;nbsp; &amp;nbsp;3&amp;nbsp;&amp;nbsp; &amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;3&amp;nbsp;&amp;nbsp; &amp;nbsp;3&amp;nbsp;&amp;nbsp; &amp;nbsp;3&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;3&amp;nbsp;&amp;nbsp; &amp;nbsp;3&amp;nbsp;&amp;nbsp; &amp;nbsp;3&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;You might like:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/io-streams.html" target="_blank"&gt;IO Streams in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html" target="_blank"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html" target="_blank"&gt;String vs Stringbuffer vs Stringbuilder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2014/12/marker-interfaces-in-java.html" target="_blank"&gt;Marker Interfaces&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/varargs-in-java.html" target="_blank"&gt;Var Args in java&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/nmjGiTkSthU" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/1363474640034918765/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/add-two-matrices.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/1363474640034918765" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/1363474640034918765" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/nmjGiTkSthU/add-two-matrices.html" title="add two matrices" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/add-two-matrices.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-4437457359681317941</id><published>2015-01-24T10:21:00.000+05:30</published><updated>2015-01-28T17:10:35.486+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">IO Streams</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;The basic idea of&amp;nbsp; IOStreams is&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Storing and reading data from files&lt;/li&gt;&lt;li&gt;reading data from keyword&lt;/li&gt;&lt;/ul&gt;First let us understand some basic terminology.&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Persistent media:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The environment that allows us to store data permanently is called persistent media.&lt;/li&gt;&lt;li&gt;We can store data permanently in three places&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;File&lt;/li&gt;&lt;li&gt;Database&lt;/li&gt;&lt;li&gt;Remote Computer&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style="text-align: left;"&gt;Persistence:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;The process of storing data permanently in a persistence media.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Persistence Logic:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The logic that persist data in a persistence media is called persistence logic.&lt;/li&gt;&lt;li&gt;Ex: IOStreams based logic, JDBC logic, Networking based logic.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Persistence Technologies:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;The technology that provides API to develop persistence logic is called persistence technology.&lt;/li&gt;&lt;li&gt;Well known persistence technologies are&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;IOStreams : to persist data in files&lt;/li&gt;&lt;li&gt;JDBC, EJB, Hibernate: to persist data in db&lt;/li&gt;&lt;li&gt;Networking: to persist data in remote computer&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Where can we store data permanently?&amp;nbsp;&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In persistence medias either files or in databases.&lt;/li&gt;&lt;li&gt;Storing data in variables and arrays&amp;nbsp; is temporary. Data will be lost when a local variable goes out of scope or when the program terminates.&lt;/li&gt;&lt;li&gt;programmers use files or databases for long term storage of large amount of data. it is available even after termination of the program. We refer to data maintained on files as persistent data, because the data exists beyond the duration of the program execution.&lt;/li&gt;&lt;li&gt;To store data in files and databases&amp;nbsp; Oracle has given in&amp;nbsp; built API. We all need to do is creating the particular class object calling methods for storing and reading data from that persistence media.&lt;/li&gt;&lt;li&gt;IOStreams API is given to store and read data from files&lt;/li&gt;&lt;li&gt;JDBC API is given to store and read data from Databases.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;How java application can store or read data from a file?&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using stream object.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Introduction to Streams: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Stream is logical connection between java program and a file.&lt;/li&gt;&lt;li&gt;To store the data in the persistence media there should be a way to connect to persistence media from java application either physically or logically. Stream provides logical connection.&lt;/li&gt;&lt;li&gt;"Its a continuous flow of data between java program and persistence media"&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Direction of stream flow:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Stream has a direction and its direction depends on the viewer's view. In java the viewer is java Application. If you look from Java Application it is sending out from Java Application.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Type of Streams: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Generally Streams are divided in to two types based on data flow direction.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;InputStream.&lt;/li&gt;&lt;li&gt;OutPutStream. &lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;InputStream:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The stream that allows data to come into the java application from the persistent media is called input Stream.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;OutPutStream: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The stream that allows data to send out from the java application to be stored into the persistence media is called OutPutStream.&lt;/li&gt;&lt;li&gt;Basically InputStreams are used to read data from a persistence media , and Oputstreams are used to write or store&amp;nbsp; data in a persistence media from a java application.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Types of Java Streams: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In java we are allowed to send data through streams only either in the format of bytes or characters. So based on the type of the data passed through streams .&lt;/li&gt;&lt;li&gt;In java streams are divided in to two types.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Binary Streams.&lt;/li&gt;&lt;li&gt;Character Streams.&lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;1.Binary Streams:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The streams which read and write data in the format of&amp;nbsp; bytes is called Character streams.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;2.Character Streams: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The streams which read and write data in the format of&amp;nbsp; characters is called Character streams.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-jP-jOzPVZdU/VMNB1DfZ68I/AAAAAAAAAHw/Z4qZ0I89IO0/s1600/JavaStreams.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img alt="Java Io Streams" border="0" src="http://1.bp.blogspot.com/-jP-jOzPVZdU/VMNB1DfZ68I/AAAAAAAAAHw/Z4qZ0I89IO0/s1600/JavaStreams.jpg" height="280" title="JavaStream" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div&gt;&lt;div&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/8UFA6b0-gTQ" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/4437457359681317941/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/io-streams.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4437457359681317941" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/4437457359681317941" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/8UFA6b0-gTQ/io-streams.html" title="IO Streams" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://1.bp.blogspot.com/-jP-jOzPVZdU/VMNB1DfZ68I/AAAAAAAAAHw/Z4qZ0I89IO0/s72-c/JavaStreams.jpg" height="72" width="72" /><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/io-streams.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-8849926188414899019</id><published>2015-01-12T17:24:00.002+05:30</published><updated>2015-02-01T12:22:45.053+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Find Output of Program" /><title type="text">Programing Inrerview Questions on try catch</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;1. what is the output of following program:&lt;/h3&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Demo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("instance of java");&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOTRYCAT1')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;div id="TOTRYCAT1" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;Compilte time error &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;2. what is the output of following program:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class Demo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("try block");&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; finally{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; System.out.println("finally block");&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; } &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOTRYCAT2')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;div id="TOTRYCAT2" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;try block &lt;/li&gt;&lt;li class="alt"&gt;finally block &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;3. what is the output of following program: &lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class StringDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int a = 0;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int b = 10;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int c = b / a;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print("try block");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; catch(Exception e) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.print("catch block");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOTRYCAT3')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOTRYCAT3" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;catch block&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/iRZrec9A9Io" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/8849926188414899019/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/inrerview-questions-on-try-catch.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/8849926188414899019" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/8849926188414899019" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/iRZrec9A9Io/inrerview-questions-on-try-catch.html" title="Programing Inrerview Questions on try catch" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/inrerview-questions-on-try-catch.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-452742957681385588</id><published>2015-01-12T16:46:00.001+05:30</published><updated>2015-02-07T12:53:17.899+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Find Output of Program" /><title type="text">String programing interview questions </title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;1. what is the output of following program:&lt;/h3&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class StringDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; String str="I love java";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println(str.charAt(2));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOSTRNG1')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;/h3&gt;&lt;div id="TOSTRNG1" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;o&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;2. what is the output of following program: &lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class StringDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; String str="I love java";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; System.out.println(str.length());&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOSTRNG2')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOSTRNG2" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;11&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;3. what is the output of following program: &lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class StringDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; String str1="abc";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; String str2="abc";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(str1.equals(str2));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOSTRNG3')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOSTRNG3" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;true&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;4. what is the output of following program: &lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class StringDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; String str1 = "abc";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String str2 = "abc";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String str3= new String("abc");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("str1 == str2 ? "+(str1==str2));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("str1 == str3 ? "+(str1==str3));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("str1 equals str3 ? "+(str1.equals(str3))); &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOSTRNG4')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOSTRNG4" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;str1 == str2 ? true&lt;/li&gt;&lt;li class="alt"&gt;str1 == str3 ? false&lt;/li&gt;&lt;li class="alt"&gt;str1 equals str3 ? true&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/WY3bP4xP4mw" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/452742957681385588/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/string-programing-interview-questions.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/452742957681385588" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/452742957681385588" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/WY3bP4xP4mw/string-programing-interview-questions.html" title="String programing interview questions " /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/string-programing-interview-questions.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-3804803890345394144</id><published>2015-01-12T16:03:00.004+05:30</published><updated>2015-02-27T21:48:37.809+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Find Output of Program" /><title type="text">Inheritance programing interview questions</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;1. what is the output of following program:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class SuperDemo{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public void show(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println("super class method called");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;public class SubDemo extends SuperDemo{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;public void show(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println("sub class method called");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;SubDemo subobj=new SubDemo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;subobj.show();&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOIN1')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOIN1" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;sub class method called&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;2. what is the output of following program:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class SuperDemo{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int x;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;public class SubDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int y;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void show(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;super.x=y+2;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println("x="+super.x+"y="+y);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;SubDemo subobj=new SubDemo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;subobj.show();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOIN2')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOIN2" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;x=2 y=0&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;3. what is the output of following program:&lt;/h3&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class SuperDemo{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int x;&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;public class SubDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int y;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void show(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;super.x=y+2;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println("x="+super.x+"y="+y);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;SubDemo subobj=new SubDemo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;subobj.x=2;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;subobj.y=2; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;subobj.show();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOIN3')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOIN3" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;x=4 y=2&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;4. what is the output of following program:&lt;/h3&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class SuperDemo{&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int x;&lt;/li&gt;&lt;li class="alt"&gt;SuperDemo(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;x=24; &lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjava;&lt;/li&gt;&lt;li class="alt"&gt;public class SubDemo{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;int y;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void show(){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println("x="+super.x);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println("y="+y); &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;SubDemo subobj=new SubDemo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;subobj.show();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;button class="postButton" onclick="showHideDiv('TOIN4')" type="button"&gt;Click for Output&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;div id="TOIN4" style="display: none; text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;x=12&lt;/li&gt;&lt;li class="alt"&gt;y=0&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/GK86Zei2HD4" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/3804803890345394144/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/inheritance-programing-interview.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3804803890345394144" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3804803890345394144" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/GK86Zei2HD4/inheritance-programing-interview.html" title="Inheritance programing interview questions" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/inheritance-programing-interview.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-6648338698611658667</id><published>2015-01-10T13:20:00.001+05:30</published><updated>2015-02-28T08:59:54.768+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Arrays in java</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Array:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Array is referenced data type used to store multiple values of same type in continues memory locations with single variable name.&lt;/li&gt;&lt;li&gt;The size of array can not change at the run time.&lt;/li&gt;&lt;li&gt;Once the memory has been allocated for an array that memory can not be altered at the run time.&lt;/li&gt;&lt;li&gt;Java arrays are objects.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Need of array: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;In projects array is used to collect similar type of objects to send all those values with single call.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Problem of primitive data types: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using primitive data types we can not store values in continuous memory locations.&lt;/li&gt;&lt;li&gt;Due to this limitation we have two problems.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;1.we cant store multiple values: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If we want to store multiple values , say 1 to 10 , we must create 10 variables .&lt;/li&gt;&lt;li&gt;All those 10 variables are created at different locations.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;2. we can not pass multiple values in single call: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using primitive variables we can not pass all values to the remote computer with single network call , which increases burden on network and also increase lines of code in program.&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;Solution: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;To solve above two problems , values must be stored in continuous memory locations with single variable name.&amp;nbsp;&lt;/li&gt;&lt;li&gt;This can be possible using array.&lt;/li&gt;&lt;li&gt;In java array is reference data type . it is used to store fixed number of multiple values of same type in continuous memory locations.&lt;/li&gt;&lt;li&gt;Like other data types array is not a keyword it is a concept. it creates continuous memory locations using other primitive or reference types.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&amp;nbsp;Array Limitation:&amp;nbsp;&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Array size is fixed , means we can not increase or decrease its size after its creation.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Array Declaration: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;lt;Accessibility modifier&amp;gt;&amp;lt;Modifier&amp;gt;&amp;lt;datatype&amp;gt;[] &amp;lt;array variable name&amp;gt;;&lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;For example:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;public static int[] i;&lt;/li&gt;&lt;li&gt;public static Example[] e;&lt;/li&gt;&lt;li&gt;Like in C or C++  , in java we can not mention array size in declaration part. It leads Compile time error.&lt;/li&gt;&lt;li&gt;int[5] i; Compile time Error: illegal start of expression&lt;/li&gt;&lt;li&gt;int [] i;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Possible declaration:&lt;/h3&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;After data type : int[] i;&lt;/li&gt;&lt;li&gt;Before variable name : int []i;&lt;/li&gt;&lt;li&gt;After variable name : int i[]; &lt;/li&gt;&lt;/ol&gt;&lt;h3 style="text-align: left;"&gt;Type of arrays:&lt;/h3&gt;&lt;/div&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Single dimensional : int [] i;&lt;/li&gt;&lt;li&gt;Two dimensional : int[][] i;&lt;/li&gt;&lt;li&gt;Three dimensional : int [][][] i;&lt;/li&gt;&lt;/ol&gt;&lt;h3 style="text-align: left;"&gt;Array object creation:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;lt;Accessibility Modifier&amp;gt;&amp;lt;Modifier&amp;gt;&amp;lt;data type&amp;gt;[]&amp;lt;array name&amp;gt;={&amp;lt;list of values with , separator&amp;gt;};&lt;/li&gt;&lt;li&gt;int [] ia={10,20,30,40};&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/Sy3Vs3K8yxw" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/6648338698611658667/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/arrays-in-java.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/6648338698611658667" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/6648338698611658667" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/Sy3Vs3K8yxw/arrays-in-java.html" title="Arrays in java" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/arrays-in-java.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-3357086499212329488</id><published>2015-01-10T11:32:00.000+05:30</published><updated>2015-02-01T12:24:46.526+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Super keyword </title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;super:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;The functionality of super keyword is only to point the immediate super class object of the current object.&lt;/li&gt;&lt;li&gt;super keyword is applicable only in the non static methods and super keyword not applicable in the static methods.&lt;/li&gt;&lt;li&gt;super keyword used to access the members of the super class object.&lt;/li&gt;&lt;li&gt;super.member;&lt;/li&gt;&lt;li&gt;It is used to store super class non static members memory reference through current sub class object for separating super class members from subclass members.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Uses: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using super keyword we can explicitly point the immediate super class object and access all the super class members which are present with the same name of the subclass members from the sub class methods.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public Class SuperDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a,b;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void show() {&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(a);&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(b);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class Subdemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a,b;&lt;/li&gt;&lt;li class="alt"&gt;void disply(){&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(a);&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(b);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; super.show();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;Subdemo obj= new Subdemo();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;obj.a=1;&lt;/li&gt;&lt;li class="alt"&gt;obj.b=2;&lt;/li&gt;&lt;li class="alt"&gt;super.a=10;&lt;/li&gt;&lt;li class="alt"&gt;super.b=20;&lt;/li&gt;&lt;li class="alt"&gt;obj.disply();&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;Output:&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;1&lt;/li&gt;&lt;li class="alt"&gt;2&lt;/li&gt;&lt;li class="alt"&gt;10&lt;/li&gt;&lt;li class="alt"&gt;20 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using super keyword we can explicitly call the super class constructor.&lt;/li&gt;&lt;li&gt;The statement which explicitly calling super class constructor should be always the first statement of the sub class constructor.&lt;/li&gt;&lt;li&gt;The statement which explicitly calls the super class constructor should be present inside a constructor only.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public Class SuperDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a,b;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public void show() {&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(a);&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(b);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;SuperDemo(int x, int y){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;a=x;&lt;/li&gt;&lt;li class="alt"&gt;b=y&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class Subdemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;int a,b;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;SubDemo(int x, int y){&lt;/li&gt;&lt;li class="alt"&gt;super(10,20); &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;a=x;&lt;/li&gt;&lt;li class="alt"&gt;b=y&lt;/li&gt;&lt;li class="alt"&gt;} &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;void disply(){&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(a);&lt;/li&gt;&lt;li class="alt"&gt;System.out.println(b);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; super.show();&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;Subdemo obj= new Subdemo(1,2);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;obj.disply();&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;Output:&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;1&lt;/li&gt;&lt;li class="alt"&gt;2&lt;/li&gt;&lt;li class="alt"&gt;10&lt;/li&gt;&lt;li class="alt"&gt;20 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;Key points to remember:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;It is a keyword used to store super class non static members reference in subclass object.&lt;/li&gt;&lt;li&gt;Pre defined instance variable used to hold super class object reference through sub class object.&lt;/li&gt;&lt;li&gt;Used to separate super class and sub class members if both have same name.&lt;/li&gt;&lt;li&gt;It must be used explicitly if super class and sub class members have the same name.&lt;/li&gt;&lt;li&gt;Used to call super class constructor from sub class constructor.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/ekQ3j8PODL0" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/3357086499212329488/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/super-keyword.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3357086499212329488" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3357086499212329488" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/ekQ3j8PODL0/super-keyword.html" title="Super keyword " /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/super-keyword.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-2525223198270134484</id><published>2015-01-06T23:26:00.002+05:30</published><updated>2015-02-12T09:02:53.802+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">Factory Method Pattern</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 class="h1" style="text-align: left;"&gt;Factory Method Pattern:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;b&gt;Problem&lt;/b&gt;: Using new keyword we can not create object with flexibility and by applying restrictions.&lt;/li&gt;&lt;li&gt;Solution: Use Factory pattern (or) Factory method.&lt;/li&gt;&lt;li&gt;By defining a abstract class or an interface but let the subclass&amp;nbsp; decide which class object to instantiate.&lt;/li&gt;&lt;li&gt;A method of a class capable of constructing and returning its own class object or other class object is called "factory method".&lt;/li&gt;&lt;li&gt;There are two types of factory methods.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Static factory method.&lt;/li&gt;&lt;li&gt;Instance factory method. &lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;1.Static Factory method:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A static method defined to construct and return object of same class or different is known as static factory method.&lt;/li&gt;&lt;li&gt;Some of the pre defined static factory methods are as follows.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Thread th= Thread.currentThread();&lt;/li&gt;&lt;li&gt;Class c=Class.forName();&lt;/li&gt;&lt;li&gt;Runtime rt=Runtime.getRuntime();&lt;/li&gt;&lt;li&gt;Calender c=Calender.getInstance();&lt;/li&gt;&lt;/ol&gt;&lt;h4 style="text-align: left;"&gt;2.Instance Factory method:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;A non static method defined to construct and return object of same class or different is known as instance factory method.&lt;/li&gt;&lt;li&gt;Some of the pre defined instance factory methods are as follows.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;String s= new String("instance of");&lt;br /&gt;&amp;nbsp;String s1=s.concat("java");&lt;/li&gt;&lt;li&gt;StringBuffer sb=new StringBuffer("instance of");&lt;br /&gt;sb=sb.subString(0,2);&lt;/li&gt;&lt;li&gt;Date d= new Date();&lt;br /&gt;String s=d.toString();&lt;/li&gt;&lt;/ol&gt;Program on Factory method / Factory Design pattern:&lt;br /&gt;&lt;br /&gt;Step 1: create an interface:&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public interface Vehicle {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public void engine();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;Step 2: create a Two Wheeler class which implements vehicle interface:&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public class TwoWheeler implements Vehicle {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; @Override&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void engine() {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Two Wheeler");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;Step 3:: create a Four Wheeler class which implements vehicle interface:&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public class FourWheeler implements Vehicle {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; @Override&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void engine() {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("FourWheeler");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;Step 4: create a SixWheeler class which implements vehicle interface:&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public class SixWheeler implements Vehicle {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; @Override&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void engine() {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("SixWheeler");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;Step 5: create a TestEngine class which is having factory method:&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public class TestEngine {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public Vehicle getVehicle(String venname){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(venname==null){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return null;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }else if(venname.equalsIgnoreCase("TwoWheeler")){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new TwoWheeler();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }else if(venname.equalsIgnoreCase("FourWheeler")){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new FourWheeler();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }else if(venname.equalsIgnoreCase("SixWheeler")){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new SixWheeler();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return null;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;Step 6: create a FactoryDemo class:&lt;br /&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;public class FactoryDemo {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; public static void main(String args[]){&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; TestEngine te= new TestEngine();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Vehicle vehcle1=te.getVehicle("TwoWheeler");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vehcle1.engine();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Vehicle vehcle2=te.getVehicle("FourWheeler");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vehcle2.engine();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Vehicle vehcle3=te.getVehicle("SixWheeler");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vehcle3.engine();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;TwoWheeler&lt;/li&gt;&lt;li class="alt"&gt;FourWheeler&lt;/li&gt;&lt;li class="alt"&gt;SixWheeler&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/vVN8DPIAvKk" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/2525223198270134484/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/factory-method-pattern.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/2525223198270134484" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/2525223198270134484" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/vVN8DPIAvKk/factory-method-pattern.html" title="Factory Method Pattern" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/factory-method-pattern.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-5242798722664973282</id><published>2015-01-06T22:20:00.000+05:30</published><updated>2015-02-28T09:01:54.277+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Find Output of Program" /><title type="text">Design patterns in java</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Design patterns: &lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Pattern means set of guide lines.&lt;/li&gt;&lt;li&gt;Design patterns are solutions to commonly reoccurring problems in software development.&lt;/li&gt;&lt;li&gt;Design patterns are well proven solutions to common software problems.&lt;/li&gt;&lt;li&gt;Design patterns are best practices to use software technologies effectively in application development.&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Design patterns used in analysis and requirement&amp;nbsp; phase of&amp;nbsp; SDLC.&lt;/li&gt;&lt;li&gt;Design patterns can be implemented by using programming language.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="text-align: left;"&gt;Advantages:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Reusable.&lt;/li&gt;&lt;li&gt;These are already defined solutions to common re occurring problems so it reduces time.&lt;/li&gt;&lt;li&gt;They are already defined so Easy to understand and debug.&lt;/li&gt;&lt;/ul&gt;&lt;h4 class="h4"&gt;Categorization:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;These are categorized into two parts.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Java SE Design patterns.&lt;/li&gt;&lt;li&gt;Java EE Design patterns.&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;Java SE Design patterns:&amp;nbsp;&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;In Java SE there are mainly three types.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class="h4" style="text-align: left;"&gt;1.Creational Design patterns:&lt;/h4&gt;&lt;ol class="points"&gt;&lt;li&gt;Factory Pattern &lt;/li&gt;&lt;li&gt;Abstract Factory Pattern&lt;/li&gt;&lt;li&gt;Singleton Pattern&lt;/li&gt;&lt;li&gt;Prototype Pattern&lt;/li&gt;&lt;li&gt;Builder Pattern.&lt;/li&gt;&lt;/ol&gt;&lt;h4 class="h4" style="text-align: left;"&gt;2.Structural Design patterns:&lt;/h4&gt;&lt;ol class="points"&gt;&lt;li&gt;Adapter Pattern&lt;/li&gt;&lt;li&gt;Bridge Pattern&lt;/li&gt;&lt;li&gt;Composite Pattern&lt;/li&gt;&lt;li&gt;Decorator Pattern&lt;/li&gt;&lt;li&gt;Facade Pattern&lt;/li&gt;&lt;li&gt;Flyweight Pattern&lt;/li&gt;&lt;li&gt;Proxy Pattern&lt;/li&gt;&lt;/ol&gt;&lt;h4 class="h4"&gt;3.Behavioral Design patterns: &lt;/h4&gt;&lt;ol id="points"&gt;&lt;li&gt;Chain Of Responsibility Pattern&lt;/li&gt;&lt;li&gt;Command Pattern&lt;/li&gt;&lt;li&gt;Interpreter Pattern&lt;/li&gt;&lt;li&gt;Iterator Pattern&lt;/li&gt;&lt;li&gt;Mediator Pattern&lt;/li&gt;&lt;li&gt;Memento Pattern&lt;/li&gt;&lt;li&gt;Observer Pattern&lt;/li&gt;&lt;li&gt;State Pattern&lt;/li&gt;&lt;li&gt;Strategy Pattern&lt;/li&gt;&lt;li&gt;Template Pattern&lt;/li&gt;&lt;li&gt;Visitor Pattern&lt;/li&gt;&lt;/ol&gt;Read More:&lt;br /&gt;&lt;a href="http://www.instanceofjava.com/2015/01/factory-method-pattern.html" target="_blank"&gt;Factory pattern&lt;/a&gt; &lt;br /&gt;&lt;ol id="points"&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/0yGfA-bl67U" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/5242798722664973282/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/5242798722664973282" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/5242798722664973282" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/0yGfA-bl67U/design-patterns-in-java.html" title="Design patterns in java" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/design-patterns-in-java.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-721559610175101832</id><published>2015-01-06T10:49:00.001+05:30</published><updated>2015-02-12T09:03:39.570+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java Programs" /><title type="text">Sort ArrayList in descending order</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 style="text-align: left;"&gt;Descending order:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.ArrayList;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;import java.util.Collections;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Comparator;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class SortArrayListDesc {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //create an ArrayList object&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ArrayList arrayList = new ArrayList();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Add elements to Arraylist&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(1);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(2);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(3);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(4);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(5);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(6);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /*&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; Use static Comparator reverseOrder() method of Collections&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; utility class to get comparator object&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Comparator comparator = Collections.reverseOrder();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Before sorting&amp;nbsp; : "&amp;nbsp; + arrayList);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /*&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; use&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; static void sort(List list, Comparator com) method of Collections class.&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.sort(arrayList,comparator);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("After sorting&amp;nbsp; : + arrayList);&lt;/li&gt;&lt;li class="alt"&gt; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;Before sorting&amp;nbsp; : [1, 2, 3, 4, 5, 6]&lt;/li&gt;&lt;li class="alt"&gt;After sorting&amp;nbsp; : [6, 5, 4, 3, 2, 1]&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Ascending order:&lt;/h3&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.ArrayList;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;import java.util.Collections;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.Comparator;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class SortArrayListAsc{&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //create an ArrayList object&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ArrayList arrayList = new ArrayList();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //Add elements to Arraylist&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(10);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(4);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(7);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(2);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(5);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(3);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("Before sorting&amp;nbsp; : "&amp;nbsp; + arrayList);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /*&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; use&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; static void sort(List list) method of Collections class.&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.sort(arrayList);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("After sorting&amp;nbsp; : + arrayList);&lt;/li&gt;&lt;li class="alt"&gt; &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;Before sorting&amp;nbsp; : [10, 4, 7, 2, 5, 3]&lt;/li&gt;&lt;li class="alt"&gt;After sorting&amp;nbsp; : [2, 3, 4, 5, 7, 10]&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/KvBZnz1s9d4" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/721559610175101832/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/sort-arraylist-in-descending-order.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/721559610175101832" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/721559610175101832" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/KvBZnz1s9d4/sort-arraylist-in-descending-order.html" title="Sort ArrayList in descending order" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/sort-arraylist-in-descending-order.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-7792710251197030073</id><published>2015-01-05T23:38:00.001+05:30</published><updated>2015-02-17T14:36:44.762+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java Programs" /><title type="text">Arraylist add element at specific index</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt;import java.util.ArrayList;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public class AddElementAtSpecifiedIndex {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public static void main(String[] args) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; //create an ArrayList object&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; ArrayList arrayList = new ArrayList();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; //Add elements to Arraylist&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add("a");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add("b");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; arrayList.add("c");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp; &amp;nbsp; arrayList.add("d");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add("f");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add("g");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(1,"Y");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println("ArrayList values...");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; //display elements of ArrayList&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; for(int index=0; index &amp;lt; arrayList.size(); index++)&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(arrayList.get(index));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; arrayList.add(2,"Z");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp; System.out.println("ArrayList values...");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; //display elements of ArrayList&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; for(int index=0; index &amp;lt; arrayList.size(); index++)&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(arrayList.get(index));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; }&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;ArrayList values...&lt;/li&gt;&lt;li class="alt"&gt;a&lt;/li&gt;&lt;li class="alt"&gt;Y&lt;/li&gt;&lt;li class="alt"&gt;b&lt;/li&gt;&lt;li class="alt"&gt;c&lt;/li&gt;&lt;li class="alt"&gt;d&lt;/li&gt;&lt;li class="alt"&gt;f&lt;/li&gt;&lt;li class="alt"&gt;g&lt;/li&gt;&lt;li class="alt"&gt;ArrayList values...&lt;/li&gt;&lt;li class="alt"&gt;a&lt;/li&gt;&lt;li class="alt"&gt;Y&lt;/li&gt;&lt;li class="alt"&gt;Z&lt;/li&gt;&lt;li class="alt"&gt;b&lt;/li&gt;&lt;li class="alt"&gt;c&lt;/li&gt;&lt;li class="alt"&gt;d&lt;/li&gt;&lt;li class="alt"&gt;f&lt;/li&gt;&lt;li class="alt"&gt;g&lt;br /&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/MOy7o2tPKe8" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/7792710251197030073/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/arraylist-add-element-at-specific-index.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/7792710251197030073" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/7792710251197030073" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/MOy7o2tPKe8/arraylist-add-element-at-specific-index.html" title="Arraylist add element at specific index" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/arraylist-add-element-at-specific-index.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-3868385491774035146</id><published>2015-01-04T17:55:00.001+05:30</published><updated>2015-02-10T14:35:56.811+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">String vs stringbuffer vs stringbuilder</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;1.Definition:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;String is an immutable sequence of characters.&lt;/li&gt;&lt;li&gt;StringBuffer is mutable sequence of characters.&lt;/li&gt;&lt;li&gt;StringBuilder is also mutable sequence of characters. &lt;/li&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;The only difference between StringBuffer and StringBuilder:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;StringBuffer object is thread safe , it means StringBuffer object is modified by multiple concurrently, because&amp;nbsp; all its methods are declared as "synchronized".&lt;/li&gt;&lt;li&gt;StringBuilder class is given in jdk 1.5 version as non thread -safe class, means all its methods are non synchronized methods.&lt;/li&gt;&lt;li&gt;So , in single model application we must use StringBuilder, so that object locking and unlocking will not be there, hence performance is increased.&lt;/li&gt;&lt;li&gt;In single thread model application operations are executed in sequence hence there is no chance of object corruption.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;When should we choose String and StringBuffer?&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;If we do not want to store string modifications in the same memory we must choose String.&lt;/li&gt;&lt;li&gt;To do modifications in the same memory, we must choose StringBuffer or StringBuilder.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&amp;nbsp;Advantage and disadvantage in String:&amp;nbsp;&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Advantage : Since modifications are preserving in another memory location, we will have both original and modified values.&lt;/li&gt;&lt;li&gt;Disadvantage: It consumes lot memory for every operation, as it stores it modifications in new memory. So it leads to performance issue.&lt;/li&gt;&lt;li&gt;Solution: To solve this performance issue , in projects developers store string data using StringBuilder or StringBuffer after all modifications they convert into String and pass it back to user.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Advantage and disadvantage of StringBuffer or StringBuilder:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Advantage: It given high performance because consumes less memory as all modifications stored in same memory.&lt;/li&gt;&lt;li&gt;Disadvantage: Original value will not be preserved.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;2.Creating String , StringBuffer objects:&amp;nbsp;&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;String: &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;String object can be created in two ways.&lt;/li&gt;&lt;li&gt;By using string literal : String str="instance of java ";&lt;/li&gt;&lt;li&gt;By using its constructors: String str= new String("instaneofjavaforus") ;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;h4&gt;StringBuffer:&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;By using its available constructors&lt;/li&gt;&lt;li&gt;StringBuffer str= new StringBuffer();&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;StringBuilder: &lt;/h4&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div style="text-align: left;"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;By using its available constructors&lt;/li&gt;&lt;li&gt;StringBuilder str= new StringBuilder ();&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;3.Special operations those we can only perform on StringBuffer and StringBuilder:&amp;nbsp;&lt;/h3&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;append&lt;/li&gt;&lt;li&gt;insert&lt;/li&gt;&lt;li&gt;delete&lt;/li&gt;&lt;li&gt;reverse &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Since string is immutable we cannot perform these operations on String.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;h3 style="text-align: left;"&gt;4.Concatenation:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Using String object we can concat new string to the current&amp;nbsp; string in two ways.&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Using + operator&lt;/li&gt;&lt;li&gt;using concat() method.&lt;/li&gt;&lt;/ol&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Using StringBuffer we can perform concat operation only in one way&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Using append() method&lt;/li&gt;&lt;/ol&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;Using StringBuilder we can perform concat operation only in one way&lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Using append() method&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String str="Java";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StringBuffer sb= new StringBuffer("Java");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StringBuilder sbr= new StringBuilder("Java");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(str.concat(" language"));&amp;nbsp;&amp;nbsp; &amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(sb.append(" language"));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(sbr.append(" language"));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;Java language&lt;/li&gt;&lt;li class="alt"&gt;Java language&lt;/li&gt;&lt;li class="alt"&gt;Java language&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;&amp;nbsp;&lt;/h3&gt;&lt;h3 style="text-align: left;"&gt;5.Comparison:&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Using equals() method String objects are compared with state, because it is overridden in this class. Also hashcode(0 method is overridden in order to satisfy equals() method contract.&lt;/li&gt;&lt;/ul&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;But in StringBuffer and in StringBuilder equals() method is not overridden , so using equals() method their object are compared with reference.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;You might like:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/io-streams.html" target="_blank"&gt;IO Streams in java&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/design-patterns-in-java.html" target="_blank"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html" target="_blank"&gt;String vs Stringbuffer vs Stringbuilder&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&amp;nbsp;&lt;a href="http://www.instanceofjava.com/2014/12/marker-interfaces-in-java.html" target="_blank"&gt;Marker Interfaces&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.instanceofjava.com/2014/12/varargs-in-java.html" target="_blank"&gt;Var Args in java&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/ONGUg62giTc" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/3868385491774035146/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3868385491774035146" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/3868385491774035146" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/ONGUg62giTc/string-vs-stringbuffer-vs-stringbuilder.html" title="String vs stringbuffer vs stringbuilder" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><georss:featurename>hyderabad , Telangana, India</georss:featurename><georss:point>17.38821090273785 78.500976674258709</georss:point><georss:box>16.90325740273785 77.8555296742587 17.873164402737849 79.146423674258713</georss:box><feedburner:origLink>http://www.instanceofjava.com/2015/01/string-vs-stringbuffer-vs-stringbuilder.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-2964959029992147971.post-9149526770515773479</id><published>2015-01-04T11:51:00.001+05:30</published><updated>2015-02-12T09:03:09.122+05:30</updated><category scheme="http://www.blogger.com/atom/ns#" term="Java SE" /><title type="text">StringBuffer class in java</title><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;StringBuffer is a thread safe, mutable sequence of characters.&lt;/li&gt;&lt;li&gt;A StringBuffer is like a String , but can be modified in the same memory location.&lt;/li&gt;&lt;/ul&gt;By using following constructors we can create StringBuffer class object.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Constructors;&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;1.public StringBuffer():&amp;nbsp; &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;It&amp;nbsp; creates empty StringBuffer object with default capacity 16 characters, it means it holds 16 empty locations.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(sb.capacity());&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;16 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;2.public StringBuffer(int capacity): &lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;It creates StringBuffer object with given capacity.&lt;/li&gt;&lt;li&gt;Capacity value should be positive value. means &amp;gt;=0.&lt;/li&gt;&lt;li&gt;If we pass negative value JVM throws "java.lang.NegativeArraySizeException".&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;StringBuffer sb= new StringBuffer(12);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println(sb.capacity());&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;12 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;3.public StringBuffer(String s):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;It creates StringBuffer object characters available in passed String object and with default capacity 16 (16+String length) .&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;StringBuffer sb= new StringBuffer(new String("abc"));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println(sb.capacity());&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;19 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;h4 style="text-align: left;"&gt;4.public StringBuffer(charSequence s):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&amp;nbsp;It creates StringBuffer object characters available in passed charSequence object and with default capacity 16 (16+charSequence length) .&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;CharSequence cs = "abc";&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;StringBuffer sb= new StringBuffer(cs);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println(sb.capacity());&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&lt;br /&gt;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;19 &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Methods :&lt;/h3&gt;&lt;h4 style="text-align: left;"&gt;1.public StringBuffer append(XXX s);&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;append(String s) methods concatenates the given String and returns updated StringBuffer object.&amp;nbsp;&lt;/li&gt;&lt;li&gt;There are 8 methods with same name for accepting 8 primitive data type values.&lt;/li&gt;&lt;li&gt;And 3 more methods for accepting StringBuffer object , Object and String objects. &lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;public StringBuffer append(boolean b)&lt;/li&gt;&lt;li&gt;public StringBuffer append(char c)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(char[] str)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(char[] str, int offset, int len)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(double d)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(float f)&lt;/li&gt;&lt;li&gt;public StringBuffer append(int i)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(long l)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(Object obj)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(StringBuffer sb)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer append(String str)&amp;nbsp; &lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer();&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; sb.append("abc"); &lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(sb);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;abc&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;2.public StringBuffer insert(XXX s);&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;where xxx is java data types&amp;nbsp;&lt;/li&gt;&lt;li&gt;overloaded to take all possible java data type values &lt;/li&gt;&lt;/ul&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;public StringBuffer insert(int offset, boolean b)&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int offset, char c)&lt;/li&gt;&lt;li&gt;public insert(int offset, char[] str)&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int index, char[] str, int offset, int len)&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int offset, float f)&amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int offset, int i)&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int offset, long l)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int offset, Object obj)&amp;nbsp;&lt;/li&gt;&lt;li&gt;public StringBuffer insert(int offset, String str) &lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("abc");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; sb.insert(1, "c");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(sb);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;acbc&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;3. public StringBuffer deleteCharAt(int index):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method used to delete character at specified index.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; sb.deleteCharAt(1);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(sb);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;Jva&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;4. public StringBuffer delete(int start , int end):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method used to delete characters from specified start index to end index&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; sb.delete(1,3);&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(sb);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;Ja Language&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 style="text-align: left;"&gt;&amp;nbsp;&lt;/h4&gt;&lt;h4 style="text-align: left;"&gt;5. public StringBuffer setCharAt(int index, char ch):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method used to insert character at specified index&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; sb.insert(0, 'S');&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; System.out.println(sb);&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;SJava Language&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;6. public int indexOf(String str):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method returns index of specified sub string. if not found returns -1.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; System.out.println(sb.indexOf("J"));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;0&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;7. public int indexOf(String str, int index):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method returns index of specified sub string. if not found returns -1.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println(sb.indexOf("a",4));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;6&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;8. public int lastIndexOf(String str):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method returns last occurrence of&amp;nbsp; of specified sub string index . if not found returns -1.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println(sb.lastIndexOf("a"));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;10&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;9. public int length():&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method returns length of StringBuffer.&lt;/li&gt;&lt;/ul&gt;&lt;div style="text-align: left;"&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;System.out.println(sb.length());&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;13&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;10. public StringBuffer replace(int start, int end, String s):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method replaces the characters from start index to end index with specified string.&lt;/li&gt;&lt;/ul&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(sb.replace(0,4,"Instance of java"));&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;Instance of java Language&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;11. public StringBuffer reverse():&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method returns reverse of sequence of characters.&lt;/li&gt;&lt;/ul&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(sb.reverse());&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;egaugnaL avaJ&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4 style="text-align: left;"&gt;12. public String subString(int start, int end):&lt;/h4&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;This method returns sub string from start index to end index as a string.&lt;/li&gt;&lt;/ul&gt;&lt;div class="program-div" style="text-align: left;"&gt;&lt;div class="dp-highlighter"&gt;&lt;ol class="dp-j"&gt;&lt;li class="alt"&gt;package com.instanceofjavaforus;&lt;/li&gt;&lt;li class="alt"&gt; public Class SBDemo{&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;public static void main (String args[]) {&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp; StringBuffer sb= new StringBuffer("Java Language");&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; System.out.println(sb.substring(1,3));&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;}&lt;/li&gt;&lt;li class="alt"&gt;&amp;nbsp;&lt;/li&gt;&lt;li class="alt"&gt;OutPut:&lt;/li&gt;&lt;li class="alt"&gt;av&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="//feeds.feedburner.com/~r/InstanceOfJava/~4/zHNggJTH5b4" height="1" width="1" alt=""/&gt;</content><link rel="replies" type="application/atom+xml" href="http://www.instanceofjava.com/feeds/9149526770515773479/comments/default" title="Post Comments" /><link rel="replies" type="text/html" href="http://www.instanceofjava.com/2015/01/stringbuffer-class-in-java.html#comment-form" title="0 Comments" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/9149526770515773479" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/2964959029992147971/posts/default/9149526770515773479" /><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/InstanceOfJava/~3/zHNggJTH5b4/stringbuffer-class-in-java.html" title="StringBuffer class in java" /><author><name>instance of java</name><uri>https://plus.google.com/117147476981801937252</uri><email>noreply@blogger.com</email><gd:image rel="http://schemas.google.com/g/2005#thumbnail" width="16" height="16" src="http://img2.blogblog.com/img/b16-rounded.gif" /></author><thr:total>0</thr:total><feedburner:origLink>http://www.instanceofjava.com/2015/01/stringbuffer-class-in-java.html</feedburner:origLink></entry></feed>
